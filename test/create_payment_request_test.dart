//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//
// @dart=2.12

// ignore_for_file: unused_element, unused_import
// ignore_for_file: always_put_required_named_parameters_first
// ignore_for_file: constant_identifier_names
// ignore_for_file: lines_longer_than_80_chars

import 'package:square_dart_sdk/api.dart';
import 'package:test/test.dart';

// tests for CreatePaymentRequest
void main() {
  // final instance = CreatePaymentRequest();

  group('test CreatePaymentRequest', () {
    // The ID for the source of funds for this payment. This could be a payment token generated by the Web Payments SDK for any of its [supported methods](https://developer.squareup.com/docs/web-payments/overview#explore-payment-methods), including cards, bank transfers, Afterpay or Cash App Pay. If recording a payment that the seller received outside of Square, specify either \"CASH\" or \"EXTERNAL\". For more information, see  [Take Payments](https://developer.squareup.com/docs/payments-api/take-payments).
    // String sourceId
    test('to test the property `sourceId`', () async {
      // TODO
    });

    // A unique string that identifies this `CreatePayment` request. Keys can be any valid string but must be unique for every `CreatePayment` request.  Note: The number of allowed characters might be less than the stated maximum, if multi-byte characters are used.  For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
    // String idempotencyKey
    test('to test the property `idempotencyKey`', () async {
      // TODO
    });

    // Money amountMoney
    test('to test the property `amountMoney`', () async {
      // TODO
    });

    // Money tipMoney
    test('to test the property `tipMoney`', () async {
      // TODO
    });

    // Money appFeeMoney
    test('to test the property `appFeeMoney`', () async {
      // TODO
    });

    // The duration of time after the payment's creation when Square automatically  either completes or cancels the payment depending on the `delay_action` field value.  For more information, see  [Time threshold](https://developer.squareup.com/docs/payments-api/take-payments/card-payments/delayed-capture#time-threshold).   This parameter should be specified as a time duration, in RFC 3339 format.  Note: This feature is only supported for card payments. This parameter can only be set for a delayed capture payment (`autocomplete=false`).  Default:  - Card-present payments: \"PT36H\" (36 hours) from the creation time. - Card-not-present payments: \"P7D\" (7 days) from the creation time.
    // String delayDuration
    test('to test the property `delayDuration`', () async {
      // TODO
    });

    // The action to be applied to the payment when the `delay_duration` has elapsed. The action must be CANCEL or COMPLETE. For more information, see  [Time Threshold](https://developer.squareup.com/docs/payments-api/take-payments/card-payments/delayed-capture#time-threshold).   Default: CANCEL
    // String delayAction
    test('to test the property `delayAction`', () async {
      // TODO
    });

    // If set to `true`, this payment will be completed when possible. If set to `false`, this payment is held in an approved state until either explicitly completed (captured) or canceled (voided). For more information, see [Delayed capture](https://developer.squareup.com/docs/payments-api/take-payments/card-payments#delayed-capture-of-a-card-payment).  Default: true
    // bool autocomplete
    test('to test the property `autocomplete`', () async {
      // TODO
    });

    // Associates a previously created order with this payment.
    // String orderId
    test('to test the property `orderId`', () async {
      // TODO
    });

    // The [Customer](https://developer.squareup.com/reference/square_2023-12-13/objects/Customer) ID of the customer associated with the payment.  This is required if the `source_id` refers to a card on file created using the Cards API.
    // String customerId
    test('to test the property `customerId`', () async {
      // TODO
    });

    // The location ID to associate with the payment. If not specified, the [main location](https://developer.squareup.com/docs/locations-api#about-the-main-location) is used.
    // String locationId
    test('to test the property `locationId`', () async {
      // TODO
    });

    // An optional [TeamMember](https://developer.squareup.com/reference/square_2023-12-13/objects/TeamMember) ID to associate with  this payment.
    // String teamMemberId
    test('to test the property `teamMemberId`', () async {
      // TODO
    });

    // A user-defined ID to associate with the payment.  You can use this field to associate the payment to an entity in an external system  (for example, you might specify an order ID that is generated by a third-party shopping cart).
    // String referenceId
    test('to test the property `referenceId`', () async {
      // TODO
    });

    // An identifying token generated by [payments.verifyBuyer()](https://developer.squareup.com/reference/sdks/web/payments/objects/Payments#Payments.verifyBuyer). Verification tokens encapsulate customer device information and 3-D Secure challenge results to indicate that Square has verified the buyer identity.  For more information, see [SCA Overview](https://developer.squareup.com/docs/sca-overview).
    // String verificationToken
    test('to test the property `verificationToken`', () async {
      // TODO
    });

    // If set to `true` and charging a Square Gift Card, a payment might be returned with `amount_money` equal to less than what was requested. For example, a request for $20 when charging a Square Gift Card with a balance of $5 results in an APPROVED payment of $5. You might choose to prompt the buyer for an additional payment to cover the remainder or cancel the Gift Card payment. This field cannot be `true` when `autocomplete = true`.  For more information, see [Partial amount with Square Gift Cards](https://developer.squareup.com/docs/payments-api/take-payments#partial-payment-gift-card).  Default: false
    // bool acceptPartialAuthorization
    test('to test the property `acceptPartialAuthorization`', () async {
      // TODO
    });

    // The buyer's email address.
    // String buyerEmailAddress
    test('to test the property `buyerEmailAddress`', () async {
      // TODO
    });

    // Address billingAddress
    test('to test the property `billingAddress`', () async {
      // TODO
    });

    // Address shippingAddress
    test('to test the property `shippingAddress`', () async {
      // TODO
    });

    // An optional note to be entered by the developer when creating a payment.
    // String note
    test('to test the property `note`', () async {
      // TODO
    });

    // Optional additional payment information to include on the customer's card statement as part of the statement description. This can be, for example, an invoice number, ticket number, or short description that uniquely identifies the purchase.  Note that the `statement_description_identifier` might get truncated on the statement description to fit the required information including the Square identifier (SQ *) and name of the seller taking the payment.
    // String statementDescriptionIdentifier
    test('to test the property `statementDescriptionIdentifier`', () async {
      // TODO
    });

    // CashPaymentDetails cashDetails
    test('to test the property `cashDetails`', () async {
      // TODO
    });

    // ExternalPaymentDetails externalDetails
    test('to test the property `externalDetails`', () async {
      // TODO
    });

    // CustomerDetails customerDetails
    test('to test the property `customerDetails`', () async {
      // TODO
    });
  });
}
