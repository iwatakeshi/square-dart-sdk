//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//
// @dart=2.12

// ignore_for_file: unused_element, unused_import
// ignore_for_file: always_put_required_named_parameters_first
// ignore_for_file: constant_identifier_names
// ignore_for_file: lines_longer_than_80_chars

import 'package:square_dart_sdk/api.dart';
import 'package:test/test.dart';

// tests for Payment
void main() {
  // final instance = Payment();

  group('test Payment', () {
    // A unique ID for the payment.
    // String id
    test('to test the property `id`', () async {
      // TODO
    });

    // The timestamp of when the payment was created, in RFC 3339 format.
    // String createdAt
    test('to test the property `createdAt`', () async {
      // TODO
    });

    // The timestamp of when the payment was last updated, in RFC 3339 format.
    // String updatedAt
    test('to test the property `updatedAt`', () async {
      // TODO
    });

    // Money amountMoney
    test('to test the property `amountMoney`', () async {
      // TODO
    });

    // Money tipMoney
    test('to test the property `tipMoney`', () async {
      // TODO
    });

    // Money totalMoney
    test('to test the property `totalMoney`', () async {
      // TODO
    });

    // Money appFeeMoney
    test('to test the property `appFeeMoney`', () async {
      // TODO
    });

    // Money approvedMoney
    test('to test the property `approvedMoney`', () async {
      // TODO
    });

    // The processing fees and fee adjustments assessed by Square for this payment.
    // List<ProcessingFee> processingFee (default value: const [])
    test('to test the property `processingFee`', () async {
      // TODO
    });

    // Money refundedMoney
    test('to test the property `refundedMoney`', () async {
      // TODO
    });

    // Indicates whether the payment is APPROVED, PENDING, COMPLETED, CANCELED, or FAILED.
    // String status
    test('to test the property `status`', () async {
      // TODO
    });

    // The duration of time after the payment's creation when Square automatically applies the `delay_action` to the payment. This automatic `delay_action` applies only to payments that do not reach a terminal state (COMPLETED, CANCELED, or FAILED) before the `delay_duration` time period.  This field is specified as a time duration, in RFC 3339 format.  Notes: This feature is only supported for card payments.  Default:  - Card-present payments: \"PT36H\" (36 hours) from the creation time. - Card-not-present payments: \"P7D\" (7 days) from the creation time.
    // String delayDuration
    test('to test the property `delayDuration`', () async {
      // TODO
    });

    // The action to be applied to the payment when the `delay_duration` has elapsed.  Current values include `CANCEL` and `COMPLETE`.
    // String delayAction
    test('to test the property `delayAction`', () async {
      // TODO
    });

    // The read-only timestamp of when the `delay_action` is automatically applied, in RFC 3339 format.  Note that this field is calculated by summing the payment's `delay_duration` and `created_at` fields. The `created_at` field is generated by Square and might not exactly match the time on your local machine.
    // String delayedUntil
    test('to test the property `delayedUntil`', () async {
      // TODO
    });

    // The source type for this payment.  Current values include `CARD`, `BANK_ACCOUNT`, `WALLET`, `BUY_NOW_PAY_LATER`, `SQUARE_ACCOUNT`, `CASH` and `EXTERNAL`. For information about these payment source types, see [Take Payments](https://developer.squareup.com/docs/payments-api/take-payments).
    // String sourceType
    test('to test the property `sourceType`', () async {
      // TODO
    });

    // CardPaymentDetails cardDetails
    test('to test the property `cardDetails`', () async {
      // TODO
    });

    // CashPaymentDetails cashDetails
    test('to test the property `cashDetails`', () async {
      // TODO
    });

    // BankAccountPaymentDetails bankAccountDetails
    test('to test the property `bankAccountDetails`', () async {
      // TODO
    });

    // ExternalPaymentDetails externalDetails
    test('to test the property `externalDetails`', () async {
      // TODO
    });

    // DigitalWalletDetails walletDetails
    test('to test the property `walletDetails`', () async {
      // TODO
    });

    // BuyNowPayLaterDetails buyNowPayLaterDetails
    test('to test the property `buyNowPayLaterDetails`', () async {
      // TODO
    });

    // SquareAccountDetails squareAccountDetails
    test('to test the property `squareAccountDetails`', () async {
      // TODO
    });

    // The ID of the location associated with the payment.
    // String locationId
    test('to test the property `locationId`', () async {
      // TODO
    });

    // The ID of the order associated with the payment.
    // String orderId
    test('to test the property `orderId`', () async {
      // TODO
    });

    // An optional ID that associates the payment with an entity in another system.
    // String referenceId
    test('to test the property `referenceId`', () async {
      // TODO
    });

    // The ID of the customer associated with the payment. If the ID is  not provided in the `CreatePayment` request that was used to create the `Payment`,  Square may use information in the request  (such as the billing and shipping address, email address, and payment source)  to identify a matching customer profile in the Customer Directory.  If found, the profile ID is used. If a profile is not found, the  API attempts to create an  [instant profile](https://developer.squareup.com/docs/customers-api/what-it-does#instant-profiles).  If the API cannot create an  instant profile (either because the seller has disabled it or the  seller's region prevents creating it), this field remains unset. Note that  this process is asynchronous and it may take some time before a  customer ID is added to the payment.
    // String customerId
    test('to test the property `customerId`', () async {
      // TODO
    });

    // __Deprecated__: Use `Payment.team_member_id` instead.  An optional ID of the employee associated with taking the payment.
    // String employeeId
    test('to test the property `employeeId`', () async {
      // TODO
    });

    // An optional ID of the [TeamMember](https://developer.squareup.com/reference/square_2023-12-13/objects/TeamMember) associated with taking the payment.
    // String teamMemberId
    test('to test the property `teamMemberId`', () async {
      // TODO
    });

    // A list of `refund_id`s identifying refunds for the payment.
    // List<String> refundIds (default value: const [])
    test('to test the property `refundIds`', () async {
      // TODO
    });

    // RiskEvaluation riskEvaluation
    test('to test the property `riskEvaluation`', () async {
      // TODO
    });

    // The buyer's email address.
    // String buyerEmailAddress
    test('to test the property `buyerEmailAddress`', () async {
      // TODO
    });

    // Address billingAddress
    test('to test the property `billingAddress`', () async {
      // TODO
    });

    // Address shippingAddress
    test('to test the property `shippingAddress`', () async {
      // TODO
    });

    // An optional note to include when creating a payment.
    // String note
    test('to test the property `note`', () async {
      // TODO
    });

    // Additional payment information that gets added to the customer's card statement as part of the statement description.  Note that the `statement_description_identifier` might get truncated on the statement description to fit the required information including the Square identifier (SQ *) and the name of the seller taking the payment.
    // String statementDescriptionIdentifier
    test('to test the property `statementDescriptionIdentifier`', () async {
      // TODO
    });

    // Actions that can be performed on this payment: - `EDIT_AMOUNT_UP` - The payment amount can be edited up. - `EDIT_AMOUNT_DOWN` - The payment amount can be edited down. - `EDIT_TIP_AMOUNT_UP` - The tip amount can be edited up. - `EDIT_TIP_AMOUNT_DOWN` - The tip amount can be edited down. - `EDIT_DELAY_ACTION` - The delay_action can be edited.
    // List<String> capabilities (default value: const [])
    test('to test the property `capabilities`', () async {
      // TODO
    });

    // The payment's receipt number. The field is missing if a payment is canceled.
    // String receiptNumber
    test('to test the property `receiptNumber`', () async {
      // TODO
    });

    // The URL for the payment's receipt. The field is only populated for COMPLETED payments.
    // String receiptUrl
    test('to test the property `receiptUrl`', () async {
      // TODO
    });

    // DeviceDetails deviceDetails
    test('to test the property `deviceDetails`', () async {
      // TODO
    });

    // ApplicationDetails applicationDetails
    test('to test the property `applicationDetails`', () async {
      // TODO
    });

    // Used for optimistic concurrency. This opaque token identifies a specific version of the `Payment` object.
    // String versionToken
    test('to test the property `versionToken`', () async {
      // TODO
    });
  });
}
