//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//
// @dart=2.12

// ignore_for_file: unused_element, unused_import
// ignore_for_file: always_put_required_named_parameters_first
// ignore_for_file: constant_identifier_names
// ignore_for_file: lines_longer_than_80_chars

import 'package:square_dart_sdk/api.dart';
import 'package:test/test.dart';

// tests for OrderLineItem
void main() {
  // final instance = OrderLineItem();

  group('test OrderLineItem', () {
    // A unique ID that identifies the line item only within this order.
    // String uid
    test('to test the property `uid`', () async {
      // TODO
    });

    // The name of the line item.
    // String name
    test('to test the property `name`', () async {
      // TODO
    });

    // The quantity purchased, formatted as a decimal number. For example, `\"3\"`.  Line items with a quantity of `\"0\"` are automatically removed when paying for or otherwise completing the order.  Line items with a `quantity_unit` can have non-integer quantities. For example, `\"1.70000\"`.
    // String quantity
    test('to test the property `quantity`', () async {
      // TODO
    });

    // OrderQuantityUnit quantityUnit
    test('to test the property `quantityUnit`', () async {
      // TODO
    });

    // The note of the line item.
    // String note
    test('to test the property `note`', () async {
      // TODO
    });

    // The [CatalogItemVariation](https://developer.squareup.com/reference/square_2023-12-13/objects/CatalogItemVariation) ID applied to this line item.
    // String catalogObjectId
    test('to test the property `catalogObjectId`', () async {
      // TODO
    });

    // The version of the catalog object that this line item references.
    // int catalogVersion
    test('to test the property `catalogVersion`', () async {
      // TODO
    });

    // The name of the variation applied to this line item.
    // String variationName
    test('to test the property `variationName`', () async {
      // TODO
    });

    // The type of line item: an itemized sale, a non-itemized sale (custom amount), or the activation or reloading of a gift card.
    // String itemType
    test('to test the property `itemType`', () async {
      // TODO
    });

    // Application-defined data attached to this line item. Metadata fields are intended to store descriptive references or associations with an entity in another system or store brief information about the object. Square does not process this field; it only stores and returns it in relevant API calls. Do not use metadata to store any sensitive information (such as personally identifiable information or card details).  Keys written by applications must be 60 characters or less and must be in the character set `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed with a namespace, separated from the key with a ':' character.  Values have a maximum length of 255 characters.  An application can have up to 10 entries per metadata field.  Entries written by applications are private and can only be read or modified by the same application.  For more information, see [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
    // Map<String, String> metadata (default value: const {})
    test('to test the property `metadata`', () async {
      // TODO
    });

    // The [CatalogModifier](https://developer.squareup.com/reference/square_2023-12-13/objects/CatalogModifier)s applied to this line item.
    // List<OrderLineItemModifier> modifiers (default value: const [])
    test('to test the property `modifiers`', () async {
      // TODO
    });

    // The list of references to taxes applied to this line item. Each `OrderLineItemAppliedTax` has a `tax_uid` that references the `uid` of a top-level `OrderLineItemTax` applied to the line item. On reads, the amount applied is populated.  An `OrderLineItemAppliedTax` is automatically created on every line item for all `ORDER` scoped taxes added to the order. `OrderLineItemAppliedTax` records for `LINE_ITEM` scoped taxes must be added in requests for the tax to apply to any line items.  To change the amount of a tax, modify the referenced top-level tax.
    // List<OrderLineItemAppliedTax> appliedTaxes (default value: const [])
    test('to test the property `appliedTaxes`', () async {
      // TODO
    });

    // The list of references to discounts applied to this line item. Each `OrderLineItemAppliedDiscount` has a `discount_uid` that references the `uid` of a top-level `OrderLineItemDiscounts` applied to the line item. On reads, the amount applied is populated.  An `OrderLineItemAppliedDiscount` is automatically created on every line item for all `ORDER` scoped discounts that are added to the order. `OrderLineItemAppliedDiscount` records for `LINE_ITEM` scoped discounts must be added in requests for the discount to apply to any line items.  To change the amount of a discount, modify the referenced top-level discount.
    // List<OrderLineItemAppliedDiscount> appliedDiscounts (default value: const [])
    test('to test the property `appliedDiscounts`', () async {
      // TODO
    });

    // The list of references to service charges applied to this line item. Each `OrderLineItemAppliedServiceCharge` has a `service_charge_id` that references the `uid` of a top-level `OrderServiceCharge` applied to the line item. On reads, the amount applied is populated.  To change the amount of a service charge, modify the referenced top-level service charge.
    // List<OrderLineItemAppliedServiceCharge> appliedServiceCharges (default value: const [])
    test('to test the property `appliedServiceCharges`', () async {
      // TODO
    });

    // Money basePriceMoney
    test('to test the property `basePriceMoney`', () async {
      // TODO
    });

    // Money variationTotalPriceMoney
    test('to test the property `variationTotalPriceMoney`', () async {
      // TODO
    });

    // Money grossSalesMoney
    test('to test the property `grossSalesMoney`', () async {
      // TODO
    });

    // Money totalTaxMoney
    test('to test the property `totalTaxMoney`', () async {
      // TODO
    });

    // Money totalDiscountMoney
    test('to test the property `totalDiscountMoney`', () async {
      // TODO
    });

    // Money totalMoney
    test('to test the property `totalMoney`', () async {
      // TODO
    });

    // OrderLineItemPricingBlocklists pricingBlocklists
    test('to test the property `pricingBlocklists`', () async {
      // TODO
    });

    // Money totalServiceChargeMoney
    test('to test the property `totalServiceChargeMoney`', () async {
      // TODO
    });
  });
}
