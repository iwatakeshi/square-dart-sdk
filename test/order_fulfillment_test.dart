//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//
// @dart=2.12

// ignore_for_file: unused_element, unused_import
// ignore_for_file: always_put_required_named_parameters_first
// ignore_for_file: constant_identifier_names
// ignore_for_file: lines_longer_than_80_chars

import 'package:square_dart_sdk/api.dart';
import 'package:test/test.dart';

// tests for OrderFulfillment
void main() {
  // final instance = OrderFulfillment();

  group('test OrderFulfillment', () {
    // A unique ID that identifies the fulfillment only within this order.
    // String uid
    test('to test the property `uid`', () async {
      // TODO
    });

    // The type of the fulfillment.
    // String type
    test('to test the property `type`', () async {
      // TODO
    });

    // The state of the fulfillment.
    // String state
    test('to test the property `state`', () async {
      // TODO
    });

    // Describes what order line items this fulfillment applies to. It can be `ALL` or `ENTRY_LIST` with a supplied list of fulfillment entries.
    // String lineItemApplication
    test('to test the property `lineItemApplication`', () async {
      // TODO
    });

    // A list of entries pertaining to the fulfillment of an order. Each entry must reference a valid `uid` for an order line item in the `line_item_uid` field, as well as a `quantity` to fulfill. Multiple entries can reference the same line item `uid`, as long as the total quantity among all fulfillment entries referencing a single line item does not exceed the quantity of the order's line item itself. An order cannot be marked as `COMPLETED` before all fulfillments are `COMPLETED`, `CANCELED`, or `FAILED`. Fulfillments can be created and completed independently before order completion.
    // List<OrderFulfillmentFulfillmentEntry> entries (default value: const [])
    test('to test the property `entries`', () async {
      // TODO
    });

    // Application-defined data attached to this fulfillment. Metadata fields are intended to store descriptive references or associations with an entity in another system or store brief information about the object. Square does not process this field; it only stores and returns it in relevant API calls. Do not use metadata to store any sensitive information (such as personally identifiable information or card details). Keys written by applications must be 60 characters or less and must be in the character set `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed with a namespace, separated from the key with a ':' character. Values have a maximum length of 255 characters. An application can have up to 10 entries per metadata field. Entries written by applications are private and can only be read or modified by the same application. For more information, see [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
    // Map<String, String> metadata (default value: const {})
    test('to test the property `metadata`', () async {
      // TODO
    });

    // OrderFulfillmentPickupDetails pickupDetails
    test('to test the property `pickupDetails`', () async {
      // TODO
    });

    // OrderFulfillmentShipmentDetails shipmentDetails
    test('to test the property `shipmentDetails`', () async {
      // TODO
    });

    // OrderFulfillmentDeliveryDetails deliveryDetails
    test('to test the property `deliveryDetails`', () async {
      // TODO
    });
  });
}
