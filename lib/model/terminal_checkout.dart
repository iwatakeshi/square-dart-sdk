//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//
// @dart=2.12

// ignore_for_file: unused_element, unused_import
// ignore_for_file: always_put_required_named_parameters_first
// ignore_for_file: constant_identifier_names
// ignore_for_file: lines_longer_than_80_chars

part of openapi.api;

class TerminalCheckout {
  /// Returns a new [TerminalCheckout] instance.
  TerminalCheckout({
    this.id,
    required this.amountMoney,
    this.referenceId,
    this.note,
    this.orderId,
    this.paymentOptions,
    required this.deviceOptions,
    this.deadlineDuration,
    this.status,
    this.cancelReason,
    this.paymentIds = const [],
    this.createdAt,
    this.updatedAt,
    this.appId,
    this.locationId,
    this.paymentType,
    this.teamMemberId,
    this.customerId,
    this.appFeeMoney,
    this.statementDescriptionIdentifier,
    this.tipMoney,
  });

  /// A unique ID for this `TerminalCheckout`.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? id;

  Money amountMoney;

  /// An optional user-defined reference ID that can be used to associate this `TerminalCheckout` to another entity in an external system. For example, an order ID generated by a third-party shopping cart. The ID is also associated with any payments used to complete the checkout.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? referenceId;

  /// An optional note to associate with the checkout, as well as with any payments used to complete the checkout. Note: maximum 500 characters
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? note;

  /// The reference to the Square order ID for the checkout request. Supported only in the US.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? orderId;

  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  PaymentOptions? paymentOptions;

  DeviceCheckoutOptions deviceOptions;

  /// An RFC 3339 duration, after which the checkout is automatically canceled. A `TerminalCheckout` that is `PENDING` is automatically `CANCELED` and has a cancellation reason of `TIMED_OUT`.  Default: 5 minutes from creation  Maximum: 5 minutes
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? deadlineDuration;

  /// The status of the `TerminalCheckout`. Options: `PENDING`, `IN_PROGRESS`, `CANCEL_REQUESTED`, `CANCELED`, `COMPLETED`
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? status;

  /// The reason why `TerminalCheckout` is canceled. Present if the status is `CANCELED`.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? cancelReason;

  /// A list of IDs for payments created by this `TerminalCheckout`.
  List<String> paymentIds;

  /// The time when the `TerminalCheckout` was created, as an RFC 3339 timestamp.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? createdAt;

  /// The time when the `TerminalCheckout` was last updated, as an RFC 3339 timestamp.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? updatedAt;

  /// The ID of the application that created the checkout.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? appId;

  /// The location of the device where the `TerminalCheckout` was directed.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? locationId;

  /// The type of payment the terminal should attempt to capture from. Defaults to `CARD_PRESENT`.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? paymentType;

  /// An optional ID of the team member associated with creating the checkout.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? teamMemberId;

  /// An optional ID of the customer associated with the checkout.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? customerId;

  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  Money? appFeeMoney;

  /// Optional additional payment information to include on the customer's card statement as part of the statement description. This can be, for example, an invoice number, ticket number, or short description that uniquely identifies the purchase. Supported only in the US.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? statementDescriptionIdentifier;

  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  Money? tipMoney;

  @override
  bool operator ==(Object other) => identical(this, other) || other is TerminalCheckout &&
    other.id == id &&
    other.amountMoney == amountMoney &&
    other.referenceId == referenceId &&
    other.note == note &&
    other.orderId == orderId &&
    other.paymentOptions == paymentOptions &&
    other.deviceOptions == deviceOptions &&
    other.deadlineDuration == deadlineDuration &&
    other.status == status &&
    other.cancelReason == cancelReason &&
    _deepEquality.equals(other.paymentIds, paymentIds) &&
    other.createdAt == createdAt &&
    other.updatedAt == updatedAt &&
    other.appId == appId &&
    other.locationId == locationId &&
    other.paymentType == paymentType &&
    other.teamMemberId == teamMemberId &&
    other.customerId == customerId &&
    other.appFeeMoney == appFeeMoney &&
    other.statementDescriptionIdentifier == statementDescriptionIdentifier &&
    other.tipMoney == tipMoney;

  @override
  int get hashCode =>
    // ignore: unnecessary_parenthesis
    (id == null ? 0 : id!.hashCode) +
    (amountMoney.hashCode) +
    (referenceId == null ? 0 : referenceId!.hashCode) +
    (note == null ? 0 : note!.hashCode) +
    (orderId == null ? 0 : orderId!.hashCode) +
    (paymentOptions == null ? 0 : paymentOptions!.hashCode) +
    (deviceOptions.hashCode) +
    (deadlineDuration == null ? 0 : deadlineDuration!.hashCode) +
    (status == null ? 0 : status!.hashCode) +
    (cancelReason == null ? 0 : cancelReason!.hashCode) +
    (paymentIds.hashCode) +
    (createdAt == null ? 0 : createdAt!.hashCode) +
    (updatedAt == null ? 0 : updatedAt!.hashCode) +
    (appId == null ? 0 : appId!.hashCode) +
    (locationId == null ? 0 : locationId!.hashCode) +
    (paymentType == null ? 0 : paymentType!.hashCode) +
    (teamMemberId == null ? 0 : teamMemberId!.hashCode) +
    (customerId == null ? 0 : customerId!.hashCode) +
    (appFeeMoney == null ? 0 : appFeeMoney!.hashCode) +
    (statementDescriptionIdentifier == null ? 0 : statementDescriptionIdentifier!.hashCode) +
    (tipMoney == null ? 0 : tipMoney!.hashCode);

  @override
  String toString() => 'TerminalCheckout[id=$id, amountMoney=$amountMoney, referenceId=$referenceId, note=$note, orderId=$orderId, paymentOptions=$paymentOptions, deviceOptions=$deviceOptions, deadlineDuration=$deadlineDuration, status=$status, cancelReason=$cancelReason, paymentIds=$paymentIds, createdAt=$createdAt, updatedAt=$updatedAt, appId=$appId, locationId=$locationId, paymentType=$paymentType, teamMemberId=$teamMemberId, customerId=$customerId, appFeeMoney=$appFeeMoney, statementDescriptionIdentifier=$statementDescriptionIdentifier, tipMoney=$tipMoney]';

  Map<String, dynamic> toJson() {
    final json = <String, dynamic>{};
    if (this.id != null) {
      json[r'id'] = this.id;
    } else {
      json[r'id'] = null;
    }
      json[r'amount_money'] = this.amountMoney;
    if (this.referenceId != null) {
      json[r'reference_id'] = this.referenceId;
    } else {
      json[r'reference_id'] = null;
    }
    if (this.note != null) {
      json[r'note'] = this.note;
    } else {
      json[r'note'] = null;
    }
    if (this.orderId != null) {
      json[r'order_id'] = this.orderId;
    } else {
      json[r'order_id'] = null;
    }
    if (this.paymentOptions != null) {
      json[r'payment_options'] = this.paymentOptions;
    } else {
      json[r'payment_options'] = null;
    }
      json[r'device_options'] = this.deviceOptions;
    if (this.deadlineDuration != null) {
      json[r'deadline_duration'] = this.deadlineDuration;
    } else {
      json[r'deadline_duration'] = null;
    }
    if (this.status != null) {
      json[r'status'] = this.status;
    } else {
      json[r'status'] = null;
    }
    if (this.cancelReason != null) {
      json[r'cancel_reason'] = this.cancelReason;
    } else {
      json[r'cancel_reason'] = null;
    }
      json[r'payment_ids'] = this.paymentIds;
    if (this.createdAt != null) {
      json[r'created_at'] = this.createdAt;
    } else {
      json[r'created_at'] = null;
    }
    if (this.updatedAt != null) {
      json[r'updated_at'] = this.updatedAt;
    } else {
      json[r'updated_at'] = null;
    }
    if (this.appId != null) {
      json[r'app_id'] = this.appId;
    } else {
      json[r'app_id'] = null;
    }
    if (this.locationId != null) {
      json[r'location_id'] = this.locationId;
    } else {
      json[r'location_id'] = null;
    }
    if (this.paymentType != null) {
      json[r'payment_type'] = this.paymentType;
    } else {
      json[r'payment_type'] = null;
    }
    if (this.teamMemberId != null) {
      json[r'team_member_id'] = this.teamMemberId;
    } else {
      json[r'team_member_id'] = null;
    }
    if (this.customerId != null) {
      json[r'customer_id'] = this.customerId;
    } else {
      json[r'customer_id'] = null;
    }
    if (this.appFeeMoney != null) {
      json[r'app_fee_money'] = this.appFeeMoney;
    } else {
      json[r'app_fee_money'] = null;
    }
    if (this.statementDescriptionIdentifier != null) {
      json[r'statement_description_identifier'] = this.statementDescriptionIdentifier;
    } else {
      json[r'statement_description_identifier'] = null;
    }
    if (this.tipMoney != null) {
      json[r'tip_money'] = this.tipMoney;
    } else {
      json[r'tip_money'] = null;
    }
    return json;
  }

  /// Returns a new [TerminalCheckout] instance and imports its values from
  /// [value] if it's a [Map], null otherwise.
  // ignore: prefer_constructors_over_static_methods
  static TerminalCheckout? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      // Ensure that the map contains the required keys.
      // Note 1: the values aren't checked for validity beyond being non-null.
      // Note 2: this code is stripped in release mode!
      assert(() {
        requiredKeys.forEach((key) {
          assert(json.containsKey(key), 'Required key "TerminalCheckout[$key]" is missing from JSON.');
          assert(json[key] != null, 'Required key "TerminalCheckout[$key]" has a null value in JSON.');
        });
        return true;
      }());

      return TerminalCheckout(
        id: mapValueOfType<String>(json, r'id'),
        amountMoney: Money.fromJson(json[r'amount_money'])!,
        referenceId: mapValueOfType<String>(json, r'reference_id'),
        note: mapValueOfType<String>(json, r'note'),
        orderId: mapValueOfType<String>(json, r'order_id'),
        paymentOptions: PaymentOptions.fromJson(json[r'payment_options']),
        deviceOptions: DeviceCheckoutOptions.fromJson(json[r'device_options'])!,
        deadlineDuration: mapValueOfType<String>(json, r'deadline_duration'),
        status: mapValueOfType<String>(json, r'status'),
        cancelReason: mapValueOfType<String>(json, r'cancel_reason'),
        paymentIds: json[r'payment_ids'] is Iterable
            ? (json[r'payment_ids'] as Iterable).cast<String>().toList(growable: false)
            : const [],
        createdAt: mapValueOfType<String>(json, r'created_at'),
        updatedAt: mapValueOfType<String>(json, r'updated_at'),
        appId: mapValueOfType<String>(json, r'app_id'),
        locationId: mapValueOfType<String>(json, r'location_id'),
        paymentType: mapValueOfType<String>(json, r'payment_type'),
        teamMemberId: mapValueOfType<String>(json, r'team_member_id'),
        customerId: mapValueOfType<String>(json, r'customer_id'),
        appFeeMoney: Money.fromJson(json[r'app_fee_money']),
        statementDescriptionIdentifier: mapValueOfType<String>(json, r'statement_description_identifier'),
        tipMoney: Money.fromJson(json[r'tip_money']),
      );
    }
    return null;
  }

  static List<TerminalCheckout> listFromJson(dynamic json, {bool growable = false,}) {
    final result = <TerminalCheckout>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = TerminalCheckout.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  static Map<String, TerminalCheckout> mapFromJson(dynamic json) {
    final map = <String, TerminalCheckout>{};
    if (json is Map && json.isNotEmpty) {
      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
      for (final entry in json.entries) {
        final value = TerminalCheckout.fromJson(entry.value);
        if (value != null) {
          map[entry.key] = value;
        }
      }
    }
    return map;
  }

  // maps a json object with a list of TerminalCheckout-objects as value to a dart map
  static Map<String, List<TerminalCheckout>> mapListFromJson(dynamic json, {bool growable = false,}) {
    final map = <String, List<TerminalCheckout>>{};
    if (json is Map && json.isNotEmpty) {
      // ignore: parameter_assignments
      json = json.cast<String, dynamic>();
      for (final entry in json.entries) {
        map[entry.key] = TerminalCheckout.listFromJson(entry.value, growable: growable,);
      }
    }
    return map;
  }

  /// The list of required keys that must be present in a JSON.
  static const requiredKeys = <String>{
    'amount_money',
    'device_options',
  };
}

