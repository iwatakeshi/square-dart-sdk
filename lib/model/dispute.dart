//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//
// @dart=2.12

// ignore_for_file: unused_element, unused_import
// ignore_for_file: always_put_required_named_parameters_first
// ignore_for_file: constant_identifier_names
// ignore_for_file: lines_longer_than_80_chars

part of openapi.api;

class Dispute {
  /// Returns a new [Dispute] instance.
  Dispute({
    this.disputeId,
    this.id,
    this.amountMoney,
    this.reason,
    this.state,
    this.dueAt,
    this.disputedPayment,
    this.evidenceIds = const [],
    this.cardBrand,
    this.createdAt,
    this.updatedAt,
    this.brandDisputeId,
    this.reportedDate,
    this.reportedAt,
    this.version,
    this.locationId,
  });

  /// The unique ID for this `Dispute`, generated by Square.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? disputeId;

  /// The unique ID for this `Dispute`, generated by Square.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? id;

  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  Money? amountMoney;

  /// The reason why the cardholder initiated the dispute.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? reason;

  /// The current state of this dispute.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? state;

  /// The deadline by which the seller must respond to the dispute, in [RFC 3339 format](https://developer.squareup.com/docs/build-basics/common-data-types/working-with-dates).
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? dueAt;

  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  DisputedPayment? disputedPayment;

  /// The IDs of the evidence associated with the dispute.
  List<String> evidenceIds;

  /// The card brand used in the disputed payment.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? cardBrand;

  /// The timestamp when the dispute was created, in RFC 3339 format.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? createdAt;

  /// The timestamp when the dispute was last updated, in RFC 3339 format.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? updatedAt;

  /// The ID of the dispute in the card brand system, generated by the card brand.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? brandDisputeId;

  /// The timestamp when the dispute was reported, in RFC 3339 format.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? reportedDate;

  /// The timestamp when the dispute was reported, in RFC 3339 format.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? reportedAt;

  /// The current version of the `Dispute`.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  int? version;

  /// The ID of the location where the dispute originated.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? locationId;

  @override
  bool operator ==(Object other) => identical(this, other) || other is Dispute &&
    other.disputeId == disputeId &&
    other.id == id &&
    other.amountMoney == amountMoney &&
    other.reason == reason &&
    other.state == state &&
    other.dueAt == dueAt &&
    other.disputedPayment == disputedPayment &&
    _deepEquality.equals(other.evidenceIds, evidenceIds) &&
    other.cardBrand == cardBrand &&
    other.createdAt == createdAt &&
    other.updatedAt == updatedAt &&
    other.brandDisputeId == brandDisputeId &&
    other.reportedDate == reportedDate &&
    other.reportedAt == reportedAt &&
    other.version == version &&
    other.locationId == locationId;

  @override
  int get hashCode =>
    // ignore: unnecessary_parenthesis
    (disputeId == null ? 0 : disputeId!.hashCode) +
    (id == null ? 0 : id!.hashCode) +
    (amountMoney == null ? 0 : amountMoney!.hashCode) +
    (reason == null ? 0 : reason!.hashCode) +
    (state == null ? 0 : state!.hashCode) +
    (dueAt == null ? 0 : dueAt!.hashCode) +
    (disputedPayment == null ? 0 : disputedPayment!.hashCode) +
    (evidenceIds.hashCode) +
    (cardBrand == null ? 0 : cardBrand!.hashCode) +
    (createdAt == null ? 0 : createdAt!.hashCode) +
    (updatedAt == null ? 0 : updatedAt!.hashCode) +
    (brandDisputeId == null ? 0 : brandDisputeId!.hashCode) +
    (reportedDate == null ? 0 : reportedDate!.hashCode) +
    (reportedAt == null ? 0 : reportedAt!.hashCode) +
    (version == null ? 0 : version!.hashCode) +
    (locationId == null ? 0 : locationId!.hashCode);

  @override
  String toString() => 'Dispute[disputeId=$disputeId, id=$id, amountMoney=$amountMoney, reason=$reason, state=$state, dueAt=$dueAt, disputedPayment=$disputedPayment, evidenceIds=$evidenceIds, cardBrand=$cardBrand, createdAt=$createdAt, updatedAt=$updatedAt, brandDisputeId=$brandDisputeId, reportedDate=$reportedDate, reportedAt=$reportedAt, version=$version, locationId=$locationId]';

  Map<String, dynamic> toJson() {
    final json = <String, dynamic>{};
    if (this.disputeId != null) {
      json[r'dispute_id'] = this.disputeId;
    } else {
      json[r'dispute_id'] = null;
    }
    if (this.id != null) {
      json[r'id'] = this.id;
    } else {
      json[r'id'] = null;
    }
    if (this.amountMoney != null) {
      json[r'amount_money'] = this.amountMoney;
    } else {
      json[r'amount_money'] = null;
    }
    if (this.reason != null) {
      json[r'reason'] = this.reason;
    } else {
      json[r'reason'] = null;
    }
    if (this.state != null) {
      json[r'state'] = this.state;
    } else {
      json[r'state'] = null;
    }
    if (this.dueAt != null) {
      json[r'due_at'] = this.dueAt;
    } else {
      json[r'due_at'] = null;
    }
    if (this.disputedPayment != null) {
      json[r'disputed_payment'] = this.disputedPayment;
    } else {
      json[r'disputed_payment'] = null;
    }
      json[r'evidence_ids'] = this.evidenceIds;
    if (this.cardBrand != null) {
      json[r'card_brand'] = this.cardBrand;
    } else {
      json[r'card_brand'] = null;
    }
    if (this.createdAt != null) {
      json[r'created_at'] = this.createdAt;
    } else {
      json[r'created_at'] = null;
    }
    if (this.updatedAt != null) {
      json[r'updated_at'] = this.updatedAt;
    } else {
      json[r'updated_at'] = null;
    }
    if (this.brandDisputeId != null) {
      json[r'brand_dispute_id'] = this.brandDisputeId;
    } else {
      json[r'brand_dispute_id'] = null;
    }
    if (this.reportedDate != null) {
      json[r'reported_date'] = this.reportedDate;
    } else {
      json[r'reported_date'] = null;
    }
    if (this.reportedAt != null) {
      json[r'reported_at'] = this.reportedAt;
    } else {
      json[r'reported_at'] = null;
    }
    if (this.version != null) {
      json[r'version'] = this.version;
    } else {
      json[r'version'] = null;
    }
    if (this.locationId != null) {
      json[r'location_id'] = this.locationId;
    } else {
      json[r'location_id'] = null;
    }
    return json;
  }

  /// Returns a new [Dispute] instance and imports its values from
  /// [value] if it's a [Map], null otherwise.
  // ignore: prefer_constructors_over_static_methods
  static Dispute? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      // Ensure that the map contains the required keys.
      // Note 1: the values aren't checked for validity beyond being non-null.
      // Note 2: this code is stripped in release mode!
      assert(() {
        requiredKeys.forEach((key) {
          assert(json.containsKey(key), 'Required key "Dispute[$key]" is missing from JSON.');
          assert(json[key] != null, 'Required key "Dispute[$key]" has a null value in JSON.');
        });
        return true;
      }());

      return Dispute(
        disputeId: mapValueOfType<String>(json, r'dispute_id'),
        id: mapValueOfType<String>(json, r'id'),
        amountMoney: Money.fromJson(json[r'amount_money']),
        reason: mapValueOfType<String>(json, r'reason'),
        state: mapValueOfType<String>(json, r'state'),
        dueAt: mapValueOfType<String>(json, r'due_at'),
        disputedPayment: DisputedPayment.fromJson(json[r'disputed_payment']),
        evidenceIds: json[r'evidence_ids'] is Iterable
            ? (json[r'evidence_ids'] as Iterable).cast<String>().toList(growable: false)
            : const [],
        cardBrand: mapValueOfType<String>(json, r'card_brand'),
        createdAt: mapValueOfType<String>(json, r'created_at'),
        updatedAt: mapValueOfType<String>(json, r'updated_at'),
        brandDisputeId: mapValueOfType<String>(json, r'brand_dispute_id'),
        reportedDate: mapValueOfType<String>(json, r'reported_date'),
        reportedAt: mapValueOfType<String>(json, r'reported_at'),
        version: mapValueOfType<int>(json, r'version'),
        locationId: mapValueOfType<String>(json, r'location_id'),
      );
    }
    return null;
  }

  static List<Dispute> listFromJson(dynamic json, {bool growable = false,}) {
    final result = <Dispute>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = Dispute.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  static Map<String, Dispute> mapFromJson(dynamic json) {
    final map = <String, Dispute>{};
    if (json is Map && json.isNotEmpty) {
      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
      for (final entry in json.entries) {
        final value = Dispute.fromJson(entry.value);
        if (value != null) {
          map[entry.key] = value;
        }
      }
    }
    return map;
  }

  // maps a json object with a list of Dispute-objects as value to a dart map
  static Map<String, List<Dispute>> mapListFromJson(dynamic json, {bool growable = false,}) {
    final map = <String, List<Dispute>>{};
    if (json is Map && json.isNotEmpty) {
      // ignore: parameter_assignments
      json = json.cast<String, dynamic>();
      for (final entry in json.entries) {
        map[entry.key] = Dispute.listFromJson(entry.value, growable: growable,);
      }
    }
    return map;
  }

  /// The list of required keys that must be present in a JSON.
  static const requiredKeys = <String>{
  };
}

