//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//
// @dart=2.12

// ignore_for_file: unused_element, unused_import
// ignore_for_file: always_put_required_named_parameters_first
// ignore_for_file: constant_identifier_names
// ignore_for_file: lines_longer_than_80_chars

part of openapi.api;

class CreatePaymentRequest {
  /// Returns a new [CreatePaymentRequest] instance.
  CreatePaymentRequest({
    required this.sourceId,
    required this.idempotencyKey,
    this.amountMoney,
    this.tipMoney,
    this.appFeeMoney,
    this.delayDuration,
    this.delayAction,
    this.autocomplete,
    this.orderId,
    this.customerId,
    this.locationId,
    this.teamMemberId,
    this.referenceId,
    this.verificationToken,
    this.acceptPartialAuthorization,
    this.buyerEmailAddress,
    this.billingAddress,
    this.shippingAddress,
    this.note,
    this.statementDescriptionIdentifier,
    this.cashDetails,
    this.externalDetails,
    this.customerDetails,
  });

  /// The ID for the source of funds for this payment. This could be a payment token generated by the Web Payments SDK for any of its [supported methods](https://developer.squareup.com/docs/web-payments/overview#explore-payment-methods), including cards, bank transfers, Afterpay or Cash App Pay. If recording a payment that the seller received outside of Square, specify either \"CASH\" or \"EXTERNAL\". For more information, see  [Take Payments](https://developer.squareup.com/docs/payments-api/take-payments).
  String sourceId;

  /// A unique string that identifies this `CreatePayment` request. Keys can be any valid string but must be unique for every `CreatePayment` request.  Note: The number of allowed characters might be less than the stated maximum, if multi-byte characters are used.  For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
  String idempotencyKey;

  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  Money? amountMoney;

  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  Money? tipMoney;

  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  Money? appFeeMoney;

  /// The duration of time after the payment's creation when Square automatically  either completes or cancels the payment depending on the `delay_action` field value.  For more information, see  [Time threshold](https://developer.squareup.com/docs/payments-api/take-payments/card-payments/delayed-capture#time-threshold).   This parameter should be specified as a time duration, in RFC 3339 format.  Note: This feature is only supported for card payments. This parameter can only be set for a delayed capture payment (`autocomplete=false`).  Default:  - Card-present payments: \"PT36H\" (36 hours) from the creation time. - Card-not-present payments: \"P7D\" (7 days) from the creation time.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? delayDuration;

  /// The action to be applied to the payment when the `delay_duration` has elapsed. The action must be CANCEL or COMPLETE. For more information, see  [Time Threshold](https://developer.squareup.com/docs/payments-api/take-payments/card-payments/delayed-capture#time-threshold).   Default: CANCEL
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? delayAction;

  /// If set to `true`, this payment will be completed when possible. If set to `false`, this payment is held in an approved state until either explicitly completed (captured) or canceled (voided). For more information, see [Delayed capture](https://developer.squareup.com/docs/payments-api/take-payments/card-payments#delayed-capture-of-a-card-payment).  Default: true
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  bool? autocomplete;

  /// Associates a previously created order with this payment.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? orderId;

  /// The [Customer](https://developer.squareup.com/reference/square_2023-12-13/objects/Customer) ID of the customer associated with the payment.  This is required if the `source_id` refers to a card on file created using the Cards API.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? customerId;

  /// The location ID to associate with the payment. If not specified, the [main location](https://developer.squareup.com/docs/locations-api#about-the-main-location) is used.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? locationId;

  /// An optional [TeamMember](https://developer.squareup.com/reference/square_2023-12-13/objects/TeamMember) ID to associate with  this payment.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? teamMemberId;

  /// A user-defined ID to associate with the payment.  You can use this field to associate the payment to an entity in an external system  (for example, you might specify an order ID that is generated by a third-party shopping cart).
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? referenceId;

  /// An identifying token generated by [payments.verifyBuyer()](https://developer.squareup.com/reference/sdks/web/payments/objects/Payments#Payments.verifyBuyer). Verification tokens encapsulate customer device information and 3-D Secure challenge results to indicate that Square has verified the buyer identity.  For more information, see [SCA Overview](https://developer.squareup.com/docs/sca-overview).
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? verificationToken;

  /// If set to `true` and charging a Square Gift Card, a payment might be returned with `amount_money` equal to less than what was requested. For example, a request for $20 when charging a Square Gift Card with a balance of $5 results in an APPROVED payment of $5. You might choose to prompt the buyer for an additional payment to cover the remainder or cancel the Gift Card payment. This field cannot be `true` when `autocomplete = true`.  For more information, see [Partial amount with Square Gift Cards](https://developer.squareup.com/docs/payments-api/take-payments#partial-payment-gift-card).  Default: false
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  bool? acceptPartialAuthorization;

  /// The buyer's email address.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? buyerEmailAddress;

  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  Address? billingAddress;

  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  Address? shippingAddress;

  /// An optional note to be entered by the developer when creating a payment.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? note;

  /// Optional additional payment information to include on the customer's card statement as part of the statement description. This can be, for example, an invoice number, ticket number, or short description that uniquely identifies the purchase.  Note that the `statement_description_identifier` might get truncated on the statement description to fit the required information including the Square identifier (SQ *) and name of the seller taking the payment.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? statementDescriptionIdentifier;

  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  CashPaymentDetails? cashDetails;

  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  ExternalPaymentDetails? externalDetails;

  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  CustomerDetails? customerDetails;

  @override
  bool operator ==(Object other) => identical(this, other) || other is CreatePaymentRequest &&
    other.sourceId == sourceId &&
    other.idempotencyKey == idempotencyKey &&
    other.amountMoney == amountMoney &&
    other.tipMoney == tipMoney &&
    other.appFeeMoney == appFeeMoney &&
    other.delayDuration == delayDuration &&
    other.delayAction == delayAction &&
    other.autocomplete == autocomplete &&
    other.orderId == orderId &&
    other.customerId == customerId &&
    other.locationId == locationId &&
    other.teamMemberId == teamMemberId &&
    other.referenceId == referenceId &&
    other.verificationToken == verificationToken &&
    other.acceptPartialAuthorization == acceptPartialAuthorization &&
    other.buyerEmailAddress == buyerEmailAddress &&
    other.billingAddress == billingAddress &&
    other.shippingAddress == shippingAddress &&
    other.note == note &&
    other.statementDescriptionIdentifier == statementDescriptionIdentifier &&
    other.cashDetails == cashDetails &&
    other.externalDetails == externalDetails &&
    other.customerDetails == customerDetails;

  @override
  int get hashCode =>
    // ignore: unnecessary_parenthesis
    (sourceId.hashCode) +
    (idempotencyKey.hashCode) +
    (amountMoney == null ? 0 : amountMoney!.hashCode) +
    (tipMoney == null ? 0 : tipMoney!.hashCode) +
    (appFeeMoney == null ? 0 : appFeeMoney!.hashCode) +
    (delayDuration == null ? 0 : delayDuration!.hashCode) +
    (delayAction == null ? 0 : delayAction!.hashCode) +
    (autocomplete == null ? 0 : autocomplete!.hashCode) +
    (orderId == null ? 0 : orderId!.hashCode) +
    (customerId == null ? 0 : customerId!.hashCode) +
    (locationId == null ? 0 : locationId!.hashCode) +
    (teamMemberId == null ? 0 : teamMemberId!.hashCode) +
    (referenceId == null ? 0 : referenceId!.hashCode) +
    (verificationToken == null ? 0 : verificationToken!.hashCode) +
    (acceptPartialAuthorization == null ? 0 : acceptPartialAuthorization!.hashCode) +
    (buyerEmailAddress == null ? 0 : buyerEmailAddress!.hashCode) +
    (billingAddress == null ? 0 : billingAddress!.hashCode) +
    (shippingAddress == null ? 0 : shippingAddress!.hashCode) +
    (note == null ? 0 : note!.hashCode) +
    (statementDescriptionIdentifier == null ? 0 : statementDescriptionIdentifier!.hashCode) +
    (cashDetails == null ? 0 : cashDetails!.hashCode) +
    (externalDetails == null ? 0 : externalDetails!.hashCode) +
    (customerDetails == null ? 0 : customerDetails!.hashCode);

  @override
  String toString() => 'CreatePaymentRequest[sourceId=$sourceId, idempotencyKey=$idempotencyKey, amountMoney=$amountMoney, tipMoney=$tipMoney, appFeeMoney=$appFeeMoney, delayDuration=$delayDuration, delayAction=$delayAction, autocomplete=$autocomplete, orderId=$orderId, customerId=$customerId, locationId=$locationId, teamMemberId=$teamMemberId, referenceId=$referenceId, verificationToken=$verificationToken, acceptPartialAuthorization=$acceptPartialAuthorization, buyerEmailAddress=$buyerEmailAddress, billingAddress=$billingAddress, shippingAddress=$shippingAddress, note=$note, statementDescriptionIdentifier=$statementDescriptionIdentifier, cashDetails=$cashDetails, externalDetails=$externalDetails, customerDetails=$customerDetails]';

  Map<String, dynamic> toJson() {
    final json = <String, dynamic>{};
      json[r'source_id'] = this.sourceId;
      json[r'idempotency_key'] = this.idempotencyKey;
    if (this.amountMoney != null) {
      json[r'amount_money'] = this.amountMoney;
    } else {
      json[r'amount_money'] = null;
    }
    if (this.tipMoney != null) {
      json[r'tip_money'] = this.tipMoney;
    } else {
      json[r'tip_money'] = null;
    }
    if (this.appFeeMoney != null) {
      json[r'app_fee_money'] = this.appFeeMoney;
    } else {
      json[r'app_fee_money'] = null;
    }
    if (this.delayDuration != null) {
      json[r'delay_duration'] = this.delayDuration;
    } else {
      json[r'delay_duration'] = null;
    }
    if (this.delayAction != null) {
      json[r'delay_action'] = this.delayAction;
    } else {
      json[r'delay_action'] = null;
    }
    if (this.autocomplete != null) {
      json[r'autocomplete'] = this.autocomplete;
    } else {
      json[r'autocomplete'] = null;
    }
    if (this.orderId != null) {
      json[r'order_id'] = this.orderId;
    } else {
      json[r'order_id'] = null;
    }
    if (this.customerId != null) {
      json[r'customer_id'] = this.customerId;
    } else {
      json[r'customer_id'] = null;
    }
    if (this.locationId != null) {
      json[r'location_id'] = this.locationId;
    } else {
      json[r'location_id'] = null;
    }
    if (this.teamMemberId != null) {
      json[r'team_member_id'] = this.teamMemberId;
    } else {
      json[r'team_member_id'] = null;
    }
    if (this.referenceId != null) {
      json[r'reference_id'] = this.referenceId;
    } else {
      json[r'reference_id'] = null;
    }
    if (this.verificationToken != null) {
      json[r'verification_token'] = this.verificationToken;
    } else {
      json[r'verification_token'] = null;
    }
    if (this.acceptPartialAuthorization != null) {
      json[r'accept_partial_authorization'] = this.acceptPartialAuthorization;
    } else {
      json[r'accept_partial_authorization'] = null;
    }
    if (this.buyerEmailAddress != null) {
      json[r'buyer_email_address'] = this.buyerEmailAddress;
    } else {
      json[r'buyer_email_address'] = null;
    }
    if (this.billingAddress != null) {
      json[r'billing_address'] = this.billingAddress;
    } else {
      json[r'billing_address'] = null;
    }
    if (this.shippingAddress != null) {
      json[r'shipping_address'] = this.shippingAddress;
    } else {
      json[r'shipping_address'] = null;
    }
    if (this.note != null) {
      json[r'note'] = this.note;
    } else {
      json[r'note'] = null;
    }
    if (this.statementDescriptionIdentifier != null) {
      json[r'statement_description_identifier'] = this.statementDescriptionIdentifier;
    } else {
      json[r'statement_description_identifier'] = null;
    }
    if (this.cashDetails != null) {
      json[r'cash_details'] = this.cashDetails;
    } else {
      json[r'cash_details'] = null;
    }
    if (this.externalDetails != null) {
      json[r'external_details'] = this.externalDetails;
    } else {
      json[r'external_details'] = null;
    }
    if (this.customerDetails != null) {
      json[r'customer_details'] = this.customerDetails;
    } else {
      json[r'customer_details'] = null;
    }
    return json;
  }

  /// Returns a new [CreatePaymentRequest] instance and imports its values from
  /// [value] if it's a [Map], null otherwise.
  // ignore: prefer_constructors_over_static_methods
  static CreatePaymentRequest? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      // Ensure that the map contains the required keys.
      // Note 1: the values aren't checked for validity beyond being non-null.
      // Note 2: this code is stripped in release mode!
      assert(() {
        requiredKeys.forEach((key) {
          assert(json.containsKey(key), 'Required key "CreatePaymentRequest[$key]" is missing from JSON.');
          assert(json[key] != null, 'Required key "CreatePaymentRequest[$key]" has a null value in JSON.');
        });
        return true;
      }());

      return CreatePaymentRequest(
        sourceId: mapValueOfType<String>(json, r'source_id')!,
        idempotencyKey: mapValueOfType<String>(json, r'idempotency_key')!,
        amountMoney: Money.fromJson(json[r'amount_money']),
        tipMoney: Money.fromJson(json[r'tip_money']),
        appFeeMoney: Money.fromJson(json[r'app_fee_money']),
        delayDuration: mapValueOfType<String>(json, r'delay_duration'),
        delayAction: mapValueOfType<String>(json, r'delay_action'),
        autocomplete: mapValueOfType<bool>(json, r'autocomplete'),
        orderId: mapValueOfType<String>(json, r'order_id'),
        customerId: mapValueOfType<String>(json, r'customer_id'),
        locationId: mapValueOfType<String>(json, r'location_id'),
        teamMemberId: mapValueOfType<String>(json, r'team_member_id'),
        referenceId: mapValueOfType<String>(json, r'reference_id'),
        verificationToken: mapValueOfType<String>(json, r'verification_token'),
        acceptPartialAuthorization: mapValueOfType<bool>(json, r'accept_partial_authorization'),
        buyerEmailAddress: mapValueOfType<String>(json, r'buyer_email_address'),
        billingAddress: Address.fromJson(json[r'billing_address']),
        shippingAddress: Address.fromJson(json[r'shipping_address']),
        note: mapValueOfType<String>(json, r'note'),
        statementDescriptionIdentifier: mapValueOfType<String>(json, r'statement_description_identifier'),
        cashDetails: CashPaymentDetails.fromJson(json[r'cash_details']),
        externalDetails: ExternalPaymentDetails.fromJson(json[r'external_details']),
        customerDetails: CustomerDetails.fromJson(json[r'customer_details']),
      );
    }
    return null;
  }

  static List<CreatePaymentRequest> listFromJson(dynamic json, {bool growable = false,}) {
    final result = <CreatePaymentRequest>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = CreatePaymentRequest.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  static Map<String, CreatePaymentRequest> mapFromJson(dynamic json) {
    final map = <String, CreatePaymentRequest>{};
    if (json is Map && json.isNotEmpty) {
      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
      for (final entry in json.entries) {
        final value = CreatePaymentRequest.fromJson(entry.value);
        if (value != null) {
          map[entry.key] = value;
        }
      }
    }
    return map;
  }

  // maps a json object with a list of CreatePaymentRequest-objects as value to a dart map
  static Map<String, List<CreatePaymentRequest>> mapListFromJson(dynamic json, {bool growable = false,}) {
    final map = <String, List<CreatePaymentRequest>>{};
    if (json is Map && json.isNotEmpty) {
      // ignore: parameter_assignments
      json = json.cast<String, dynamic>();
      for (final entry in json.entries) {
        map[entry.key] = CreatePaymentRequest.listFromJson(entry.value, growable: growable,);
      }
    }
    return map;
  }

  /// The list of required keys that must be present in a JSON.
  static const requiredKeys = <String>{
    'source_id',
    'idempotency_key',
  };
}

