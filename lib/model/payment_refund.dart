//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//
// @dart=2.12

// ignore_for_file: unused_element, unused_import
// ignore_for_file: always_put_required_named_parameters_first
// ignore_for_file: constant_identifier_names
// ignore_for_file: lines_longer_than_80_chars

part of openapi.api;

class PaymentRefund {
  /// Returns a new [PaymentRefund] instance.
  PaymentRefund({
    required this.id,
    this.status,
    this.locationId,
    this.unlinked,
    this.destinationType,
    this.destinationDetails,
    required this.amountMoney,
    this.appFeeMoney,
    this.processingFee = const [],
    this.paymentId,
    this.orderId,
    this.reason,
    this.createdAt,
    this.updatedAt,
    this.teamMemberId,
  });

  /// The unique ID for this refund, generated by Square.
  String id;

  /// The refund's status: - `PENDING` - Awaiting approval. - `COMPLETED` - Successfully completed. - `REJECTED` - The refund was rejected. - `FAILED` - An error occurred.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? status;

  /// The location ID associated with the payment this refund is attached to.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? locationId;

  /// Flag indicating whether or not the refund is linked to an existing payment in Square.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  bool? unlinked;

  /// The destination type for this refund.  Current values include `CARD`, `BANK_ACCOUNT`, `WALLET`, `BUY_NOW_PAY_LATER`, `CASH`, and `EXTERNAL`.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? destinationType;

  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  DestinationDetails? destinationDetails;

  Money amountMoney;

  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  Money? appFeeMoney;

  /// Processing fees and fee adjustments assessed by Square for this refund.
  List<ProcessingFee> processingFee;

  /// The ID of the payment associated with this refund.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? paymentId;

  /// The ID of the order associated with the refund.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? orderId;

  /// The reason for the refund.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? reason;

  /// The timestamp of when the refund was created, in RFC 3339 format.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? createdAt;

  /// The timestamp of when the refund was last updated, in RFC 3339 format.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? updatedAt;

  /// An optional ID of the team member associated with taking the payment.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? teamMemberId;

  @override
  bool operator ==(Object other) => identical(this, other) || other is PaymentRefund &&
    other.id == id &&
    other.status == status &&
    other.locationId == locationId &&
    other.unlinked == unlinked &&
    other.destinationType == destinationType &&
    other.destinationDetails == destinationDetails &&
    other.amountMoney == amountMoney &&
    other.appFeeMoney == appFeeMoney &&
    _deepEquality.equals(other.processingFee, processingFee) &&
    other.paymentId == paymentId &&
    other.orderId == orderId &&
    other.reason == reason &&
    other.createdAt == createdAt &&
    other.updatedAt == updatedAt &&
    other.teamMemberId == teamMemberId;

  @override
  int get hashCode =>
    // ignore: unnecessary_parenthesis
    (id.hashCode) +
    (status == null ? 0 : status!.hashCode) +
    (locationId == null ? 0 : locationId!.hashCode) +
    (unlinked == null ? 0 : unlinked!.hashCode) +
    (destinationType == null ? 0 : destinationType!.hashCode) +
    (destinationDetails == null ? 0 : destinationDetails!.hashCode) +
    (amountMoney.hashCode) +
    (appFeeMoney == null ? 0 : appFeeMoney!.hashCode) +
    (processingFee.hashCode) +
    (paymentId == null ? 0 : paymentId!.hashCode) +
    (orderId == null ? 0 : orderId!.hashCode) +
    (reason == null ? 0 : reason!.hashCode) +
    (createdAt == null ? 0 : createdAt!.hashCode) +
    (updatedAt == null ? 0 : updatedAt!.hashCode) +
    (teamMemberId == null ? 0 : teamMemberId!.hashCode);

  @override
  String toString() => 'PaymentRefund[id=$id, status=$status, locationId=$locationId, unlinked=$unlinked, destinationType=$destinationType, destinationDetails=$destinationDetails, amountMoney=$amountMoney, appFeeMoney=$appFeeMoney, processingFee=$processingFee, paymentId=$paymentId, orderId=$orderId, reason=$reason, createdAt=$createdAt, updatedAt=$updatedAt, teamMemberId=$teamMemberId]';

  Map<String, dynamic> toJson() {
    final json = <String, dynamic>{};
      json[r'id'] = this.id;
    if (this.status != null) {
      json[r'status'] = this.status;
    } else {
      json[r'status'] = null;
    }
    if (this.locationId != null) {
      json[r'location_id'] = this.locationId;
    } else {
      json[r'location_id'] = null;
    }
    if (this.unlinked != null) {
      json[r'unlinked'] = this.unlinked;
    } else {
      json[r'unlinked'] = null;
    }
    if (this.destinationType != null) {
      json[r'destination_type'] = this.destinationType;
    } else {
      json[r'destination_type'] = null;
    }
    if (this.destinationDetails != null) {
      json[r'destination_details'] = this.destinationDetails;
    } else {
      json[r'destination_details'] = null;
    }
      json[r'amount_money'] = this.amountMoney;
    if (this.appFeeMoney != null) {
      json[r'app_fee_money'] = this.appFeeMoney;
    } else {
      json[r'app_fee_money'] = null;
    }
      json[r'processing_fee'] = this.processingFee;
    if (this.paymentId != null) {
      json[r'payment_id'] = this.paymentId;
    } else {
      json[r'payment_id'] = null;
    }
    if (this.orderId != null) {
      json[r'order_id'] = this.orderId;
    } else {
      json[r'order_id'] = null;
    }
    if (this.reason != null) {
      json[r'reason'] = this.reason;
    } else {
      json[r'reason'] = null;
    }
    if (this.createdAt != null) {
      json[r'created_at'] = this.createdAt;
    } else {
      json[r'created_at'] = null;
    }
    if (this.updatedAt != null) {
      json[r'updated_at'] = this.updatedAt;
    } else {
      json[r'updated_at'] = null;
    }
    if (this.teamMemberId != null) {
      json[r'team_member_id'] = this.teamMemberId;
    } else {
      json[r'team_member_id'] = null;
    }
    return json;
  }

  /// Returns a new [PaymentRefund] instance and imports its values from
  /// [value] if it's a [Map], null otherwise.
  // ignore: prefer_constructors_over_static_methods
  static PaymentRefund? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      // Ensure that the map contains the required keys.
      // Note 1: the values aren't checked for validity beyond being non-null.
      // Note 2: this code is stripped in release mode!
      assert(() {
        requiredKeys.forEach((key) {
          assert(json.containsKey(key), 'Required key "PaymentRefund[$key]" is missing from JSON.');
          assert(json[key] != null, 'Required key "PaymentRefund[$key]" has a null value in JSON.');
        });
        return true;
      }());

      return PaymentRefund(
        id: mapValueOfType<String>(json, r'id')!,
        status: mapValueOfType<String>(json, r'status'),
        locationId: mapValueOfType<String>(json, r'location_id'),
        unlinked: mapValueOfType<bool>(json, r'unlinked'),
        destinationType: mapValueOfType<String>(json, r'destination_type'),
        destinationDetails: DestinationDetails.fromJson(json[r'destination_details']),
        amountMoney: Money.fromJson(json[r'amount_money'])!,
        appFeeMoney: Money.fromJson(json[r'app_fee_money']),
        processingFee: ProcessingFee.listFromJson(json[r'processing_fee']),
        paymentId: mapValueOfType<String>(json, r'payment_id'),
        orderId: mapValueOfType<String>(json, r'order_id'),
        reason: mapValueOfType<String>(json, r'reason'),
        createdAt: mapValueOfType<String>(json, r'created_at'),
        updatedAt: mapValueOfType<String>(json, r'updated_at'),
        teamMemberId: mapValueOfType<String>(json, r'team_member_id'),
      );
    }
    return null;
  }

  static List<PaymentRefund> listFromJson(dynamic json, {bool growable = false,}) {
    final result = <PaymentRefund>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = PaymentRefund.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  static Map<String, PaymentRefund> mapFromJson(dynamic json) {
    final map = <String, PaymentRefund>{};
    if (json is Map && json.isNotEmpty) {
      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
      for (final entry in json.entries) {
        final value = PaymentRefund.fromJson(entry.value);
        if (value != null) {
          map[entry.key] = value;
        }
      }
    }
    return map;
  }

  // maps a json object with a list of PaymentRefund-objects as value to a dart map
  static Map<String, List<PaymentRefund>> mapListFromJson(dynamic json, {bool growable = false,}) {
    final map = <String, List<PaymentRefund>>{};
    if (json is Map && json.isNotEmpty) {
      // ignore: parameter_assignments
      json = json.cast<String, dynamic>();
      for (final entry in json.entries) {
        map[entry.key] = PaymentRefund.listFromJson(entry.value, growable: growable,);
      }
    }
    return map;
  }

  /// The list of required keys that must be present in a JSON.
  static const requiredKeys = <String>{
    'id',
    'amount_money',
  };
}

