//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//
// @dart=2.12

// ignore_for_file: unused_element, unused_import
// ignore_for_file: always_put_required_named_parameters_first
// ignore_for_file: constant_identifier_names
// ignore_for_file: lines_longer_than_80_chars

part of openapi.api;

class LoyaltyEvent {
  /// Returns a new [LoyaltyEvent] instance.
  LoyaltyEvent({
    required this.id,
    required this.type,
    required this.createdAt,
    this.accumulatePoints,
    this.createReward,
    this.redeemReward,
    this.deleteReward,
    this.adjustPoints,
    required this.loyaltyAccountId,
    this.locationId,
    required this.source_,
    this.expirePoints,
    this.otherEvent,
    this.accumulatePromotionPoints,
  });

  /// The Square-assigned ID of the loyalty event.
  String id;

  /// The type of the loyalty event.
  String type;

  /// The timestamp when the event was created, in RFC 3339 format.
  String createdAt;

  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  LoyaltyEventAccumulatePoints? accumulatePoints;

  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  LoyaltyEventCreateReward? createReward;

  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  LoyaltyEventRedeemReward? redeemReward;

  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  LoyaltyEventDeleteReward? deleteReward;

  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  LoyaltyEventAdjustPoints? adjustPoints;

  /// The ID of the [loyalty account](https://developer.squareup.com/reference/square_2023-12-13/objects/LoyaltyAccount) associated with the event.
  String loyaltyAccountId;

  /// The ID of the [location](https://developer.squareup.com/reference/square_2023-12-13/objects/Location) where the event occurred.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? locationId;

  /// Defines whether the event was generated by the Square Point of Sale.
  String source_;

  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  LoyaltyEventExpirePoints? expirePoints;

  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  LoyaltyEventOther? otherEvent;

  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  LoyaltyEventAccumulatePromotionPoints? accumulatePromotionPoints;

  @override
  bool operator ==(Object other) => identical(this, other) || other is LoyaltyEvent &&
    other.id == id &&
    other.type == type &&
    other.createdAt == createdAt &&
    other.accumulatePoints == accumulatePoints &&
    other.createReward == createReward &&
    other.redeemReward == redeemReward &&
    other.deleteReward == deleteReward &&
    other.adjustPoints == adjustPoints &&
    other.loyaltyAccountId == loyaltyAccountId &&
    other.locationId == locationId &&
    other.source_ == source_ &&
    other.expirePoints == expirePoints &&
    other.otherEvent == otherEvent &&
    other.accumulatePromotionPoints == accumulatePromotionPoints;

  @override
  int get hashCode =>
    // ignore: unnecessary_parenthesis
    (id.hashCode) +
    (type.hashCode) +
    (createdAt.hashCode) +
    (accumulatePoints == null ? 0 : accumulatePoints!.hashCode) +
    (createReward == null ? 0 : createReward!.hashCode) +
    (redeemReward == null ? 0 : redeemReward!.hashCode) +
    (deleteReward == null ? 0 : deleteReward!.hashCode) +
    (adjustPoints == null ? 0 : adjustPoints!.hashCode) +
    (loyaltyAccountId.hashCode) +
    (locationId == null ? 0 : locationId!.hashCode) +
    (source_.hashCode) +
    (expirePoints == null ? 0 : expirePoints!.hashCode) +
    (otherEvent == null ? 0 : otherEvent!.hashCode) +
    (accumulatePromotionPoints == null ? 0 : accumulatePromotionPoints!.hashCode);

  @override
  String toString() => 'LoyaltyEvent[id=$id, type=$type, createdAt=$createdAt, accumulatePoints=$accumulatePoints, createReward=$createReward, redeemReward=$redeemReward, deleteReward=$deleteReward, adjustPoints=$adjustPoints, loyaltyAccountId=$loyaltyAccountId, locationId=$locationId, source_=$source_, expirePoints=$expirePoints, otherEvent=$otherEvent, accumulatePromotionPoints=$accumulatePromotionPoints]';

  Map<String, dynamic> toJson() {
    final json = <String, dynamic>{};
      json[r'id'] = this.id;
      json[r'type'] = this.type;
      json[r'created_at'] = this.createdAt;
    if (this.accumulatePoints != null) {
      json[r'accumulate_points'] = this.accumulatePoints;
    } else {
      json[r'accumulate_points'] = null;
    }
    if (this.createReward != null) {
      json[r'create_reward'] = this.createReward;
    } else {
      json[r'create_reward'] = null;
    }
    if (this.redeemReward != null) {
      json[r'redeem_reward'] = this.redeemReward;
    } else {
      json[r'redeem_reward'] = null;
    }
    if (this.deleteReward != null) {
      json[r'delete_reward'] = this.deleteReward;
    } else {
      json[r'delete_reward'] = null;
    }
    if (this.adjustPoints != null) {
      json[r'adjust_points'] = this.adjustPoints;
    } else {
      json[r'adjust_points'] = null;
    }
      json[r'loyalty_account_id'] = this.loyaltyAccountId;
    if (this.locationId != null) {
      json[r'location_id'] = this.locationId;
    } else {
      json[r'location_id'] = null;
    }
      json[r'source'] = this.source_;
    if (this.expirePoints != null) {
      json[r'expire_points'] = this.expirePoints;
    } else {
      json[r'expire_points'] = null;
    }
    if (this.otherEvent != null) {
      json[r'other_event'] = this.otherEvent;
    } else {
      json[r'other_event'] = null;
    }
    if (this.accumulatePromotionPoints != null) {
      json[r'accumulate_promotion_points'] = this.accumulatePromotionPoints;
    } else {
      json[r'accumulate_promotion_points'] = null;
    }
    return json;
  }

  /// Returns a new [LoyaltyEvent] instance and imports its values from
  /// [value] if it's a [Map], null otherwise.
  // ignore: prefer_constructors_over_static_methods
  static LoyaltyEvent? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      // Ensure that the map contains the required keys.
      // Note 1: the values aren't checked for validity beyond being non-null.
      // Note 2: this code is stripped in release mode!
      assert(() {
        requiredKeys.forEach((key) {
          assert(json.containsKey(key), 'Required key "LoyaltyEvent[$key]" is missing from JSON.');
          assert(json[key] != null, 'Required key "LoyaltyEvent[$key]" has a null value in JSON.');
        });
        return true;
      }());

      return LoyaltyEvent(
        id: mapValueOfType<String>(json, r'id')!,
        type: mapValueOfType<String>(json, r'type')!,
        createdAt: mapValueOfType<String>(json, r'created_at')!,
        accumulatePoints: LoyaltyEventAccumulatePoints.fromJson(json[r'accumulate_points']),
        createReward: LoyaltyEventCreateReward.fromJson(json[r'create_reward']),
        redeemReward: LoyaltyEventRedeemReward.fromJson(json[r'redeem_reward']),
        deleteReward: LoyaltyEventDeleteReward.fromJson(json[r'delete_reward']),
        adjustPoints: LoyaltyEventAdjustPoints.fromJson(json[r'adjust_points']),
        loyaltyAccountId: mapValueOfType<String>(json, r'loyalty_account_id')!,
        locationId: mapValueOfType<String>(json, r'location_id'),
        source_: mapValueOfType<String>(json, r'source')!,
        expirePoints: LoyaltyEventExpirePoints.fromJson(json[r'expire_points']),
        otherEvent: LoyaltyEventOther.fromJson(json[r'other_event']),
        accumulatePromotionPoints: LoyaltyEventAccumulatePromotionPoints.fromJson(json[r'accumulate_promotion_points']),
      );
    }
    return null;
  }

  static List<LoyaltyEvent> listFromJson(dynamic json, {bool growable = false,}) {
    final result = <LoyaltyEvent>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = LoyaltyEvent.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  static Map<String, LoyaltyEvent> mapFromJson(dynamic json) {
    final map = <String, LoyaltyEvent>{};
    if (json is Map && json.isNotEmpty) {
      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
      for (final entry in json.entries) {
        final value = LoyaltyEvent.fromJson(entry.value);
        if (value != null) {
          map[entry.key] = value;
        }
      }
    }
    return map;
  }

  // maps a json object with a list of LoyaltyEvent-objects as value to a dart map
  static Map<String, List<LoyaltyEvent>> mapListFromJson(dynamic json, {bool growable = false,}) {
    final map = <String, List<LoyaltyEvent>>{};
    if (json is Map && json.isNotEmpty) {
      // ignore: parameter_assignments
      json = json.cast<String, dynamic>();
      for (final entry in json.entries) {
        map[entry.key] = LoyaltyEvent.listFromJson(entry.value, growable: growable,);
      }
    }
    return map;
  }

  /// The list of required keys that must be present in a JSON.
  static const requiredKeys = <String>{
    'id',
    'type',
    'created_at',
    'loyalty_account_id',
    'source',
  };
}

