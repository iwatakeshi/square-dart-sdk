//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//
// @dart=2.12

// ignore_for_file: unused_element, unused_import
// ignore_for_file: always_put_required_named_parameters_first
// ignore_for_file: constant_identifier_names
// ignore_for_file: lines_longer_than_80_chars

part of openapi.api;

class Checkout {
  /// Returns a new [Checkout] instance.
  Checkout({
    this.id,
    this.checkoutPageUrl,
    this.askForShippingAddress,
    this.merchantSupportEmail,
    this.prePopulateBuyerEmail,
    this.prePopulateShippingAddress,
    this.redirectUrl,
    this.order,
    this.createdAt,
    this.additionalRecipients = const [],
  });

  /// ID generated by Square Checkout when a new checkout is requested.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? id;

  /// The URL that the buyer's browser should be redirected to after the checkout is completed.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? checkoutPageUrl;

  /// If `true`, Square Checkout will collect shipping information on your behalf and store that information with the transaction information in your Square Dashboard.  Default: `false`.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  bool? askForShippingAddress;

  /// The email address to display on the Square Checkout confirmation page and confirmation email that the buyer can use to contact the merchant.  If this value is not set, the confirmation page and email will display the primary email address associated with the merchant's Square account.  Default: none; only exists if explicitly set.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? merchantSupportEmail;

  /// If provided, the buyer's email is pre-populated on the checkout page as an editable text field.  Default: none; only exists if explicitly set.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? prePopulateBuyerEmail;

  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  Address? prePopulateShippingAddress;

  /// The URL to redirect to after checkout is completed with `checkoutId`, Square's `orderId`, `transactionId`, and `referenceId` appended as URL parameters. For example, if the provided redirect_url is `http://www.example.com/order-complete`, a successful transaction redirects the customer to:  <pre><code>http://www.example.com/order-complete?checkoutId=xxxxxx&amp;orderId=xxxxxx&amp;referenceId=xxxxxx&amp;transactionId=xxxxxx</code></pre>  If you do not provide a redirect URL, Square Checkout will display an order confirmation page on your behalf; however Square strongly recommends that you provide a redirect URL so you can verify the transaction results and finalize the order through your existing/normal confirmation workflow.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? redirectUrl;

  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  Order? order;

  /// The time when the checkout was created, in RFC 3339 format.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? createdAt;

  /// Additional recipients (other than the merchant) receiving a portion of this checkout. For example, fees assessed on the purchase by a third party integration.
  List<AdditionalRecipient> additionalRecipients;

  @override
  bool operator ==(Object other) => identical(this, other) || other is Checkout &&
    other.id == id &&
    other.checkoutPageUrl == checkoutPageUrl &&
    other.askForShippingAddress == askForShippingAddress &&
    other.merchantSupportEmail == merchantSupportEmail &&
    other.prePopulateBuyerEmail == prePopulateBuyerEmail &&
    other.prePopulateShippingAddress == prePopulateShippingAddress &&
    other.redirectUrl == redirectUrl &&
    other.order == order &&
    other.createdAt == createdAt &&
    _deepEquality.equals(other.additionalRecipients, additionalRecipients);

  @override
  int get hashCode =>
    // ignore: unnecessary_parenthesis
    (id == null ? 0 : id!.hashCode) +
    (checkoutPageUrl == null ? 0 : checkoutPageUrl!.hashCode) +
    (askForShippingAddress == null ? 0 : askForShippingAddress!.hashCode) +
    (merchantSupportEmail == null ? 0 : merchantSupportEmail!.hashCode) +
    (prePopulateBuyerEmail == null ? 0 : prePopulateBuyerEmail!.hashCode) +
    (prePopulateShippingAddress == null ? 0 : prePopulateShippingAddress!.hashCode) +
    (redirectUrl == null ? 0 : redirectUrl!.hashCode) +
    (order == null ? 0 : order!.hashCode) +
    (createdAt == null ? 0 : createdAt!.hashCode) +
    (additionalRecipients.hashCode);

  @override
  String toString() => 'Checkout[id=$id, checkoutPageUrl=$checkoutPageUrl, askForShippingAddress=$askForShippingAddress, merchantSupportEmail=$merchantSupportEmail, prePopulateBuyerEmail=$prePopulateBuyerEmail, prePopulateShippingAddress=$prePopulateShippingAddress, redirectUrl=$redirectUrl, order=$order, createdAt=$createdAt, additionalRecipients=$additionalRecipients]';

  Map<String, dynamic> toJson() {
    final json = <String, dynamic>{};
    if (this.id != null) {
      json[r'id'] = this.id;
    } else {
      json[r'id'] = null;
    }
    if (this.checkoutPageUrl != null) {
      json[r'checkout_page_url'] = this.checkoutPageUrl;
    } else {
      json[r'checkout_page_url'] = null;
    }
    if (this.askForShippingAddress != null) {
      json[r'ask_for_shipping_address'] = this.askForShippingAddress;
    } else {
      json[r'ask_for_shipping_address'] = null;
    }
    if (this.merchantSupportEmail != null) {
      json[r'merchant_support_email'] = this.merchantSupportEmail;
    } else {
      json[r'merchant_support_email'] = null;
    }
    if (this.prePopulateBuyerEmail != null) {
      json[r'pre_populate_buyer_email'] = this.prePopulateBuyerEmail;
    } else {
      json[r'pre_populate_buyer_email'] = null;
    }
    if (this.prePopulateShippingAddress != null) {
      json[r'pre_populate_shipping_address'] = this.prePopulateShippingAddress;
    } else {
      json[r'pre_populate_shipping_address'] = null;
    }
    if (this.redirectUrl != null) {
      json[r'redirect_url'] = this.redirectUrl;
    } else {
      json[r'redirect_url'] = null;
    }
    if (this.order != null) {
      json[r'order'] = this.order;
    } else {
      json[r'order'] = null;
    }
    if (this.createdAt != null) {
      json[r'created_at'] = this.createdAt;
    } else {
      json[r'created_at'] = null;
    }
      json[r'additional_recipients'] = this.additionalRecipients;
    return json;
  }

  /// Returns a new [Checkout] instance and imports its values from
  /// [value] if it's a [Map], null otherwise.
  // ignore: prefer_constructors_over_static_methods
  static Checkout? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      // Ensure that the map contains the required keys.
      // Note 1: the values aren't checked for validity beyond being non-null.
      // Note 2: this code is stripped in release mode!
      assert(() {
        requiredKeys.forEach((key) {
          assert(json.containsKey(key), 'Required key "Checkout[$key]" is missing from JSON.');
          assert(json[key] != null, 'Required key "Checkout[$key]" has a null value in JSON.');
        });
        return true;
      }());

      return Checkout(
        id: mapValueOfType<String>(json, r'id'),
        checkoutPageUrl: mapValueOfType<String>(json, r'checkout_page_url'),
        askForShippingAddress: mapValueOfType<bool>(json, r'ask_for_shipping_address'),
        merchantSupportEmail: mapValueOfType<String>(json, r'merchant_support_email'),
        prePopulateBuyerEmail: mapValueOfType<String>(json, r'pre_populate_buyer_email'),
        prePopulateShippingAddress: Address.fromJson(json[r'pre_populate_shipping_address']),
        redirectUrl: mapValueOfType<String>(json, r'redirect_url'),
        order: Order.fromJson(json[r'order']),
        createdAt: mapValueOfType<String>(json, r'created_at'),
        additionalRecipients: AdditionalRecipient.listFromJson(json[r'additional_recipients']),
      );
    }
    return null;
  }

  static List<Checkout> listFromJson(dynamic json, {bool growable = false,}) {
    final result = <Checkout>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = Checkout.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  static Map<String, Checkout> mapFromJson(dynamic json) {
    final map = <String, Checkout>{};
    if (json is Map && json.isNotEmpty) {
      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
      for (final entry in json.entries) {
        final value = Checkout.fromJson(entry.value);
        if (value != null) {
          map[entry.key] = value;
        }
      }
    }
    return map;
  }

  // maps a json object with a list of Checkout-objects as value to a dart map
  static Map<String, List<Checkout>> mapListFromJson(dynamic json, {bool growable = false,}) {
    final map = <String, List<Checkout>>{};
    if (json is Map && json.isNotEmpty) {
      // ignore: parameter_assignments
      json = json.cast<String, dynamic>();
      for (final entry in json.entries) {
        map[entry.key] = Checkout.listFromJson(entry.value, growable: growable,);
      }
    }
    return map;
  }

  /// The list of required keys that must be present in a JSON.
  static const requiredKeys = <String>{
  };
}

