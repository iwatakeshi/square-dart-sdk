//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//
// @dart=2.12

// ignore_for_file: unused_element, unused_import
// ignore_for_file: always_put_required_named_parameters_first
// ignore_for_file: constant_identifier_names
// ignore_for_file: lines_longer_than_80_chars

part of openapi.api;

class Card {
  /// Returns a new [Card] instance.
  Card({
    this.id,
    this.cardBrand,
    this.last4,
    this.expMonth,
    this.expYear,
    this.cardholderName,
    this.billingAddress,
    this.fingerprint,
    this.customerId,
    this.merchantId,
    this.referenceId,
    this.enabled,
    this.cardType,
    this.prepaidType,
    this.bin,
    this.version,
    this.cardCoBrand,
  });

  /// Unique ID for this card. Generated by Square.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? id;

  /// The card's brand.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? cardBrand;

  /// The last 4 digits of the card number.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? last4;

  /// The expiration month of the associated card as an integer between 1 and 12.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  int? expMonth;

  /// The four-digit year of the card's expiration date.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  int? expYear;

  /// The name of the cardholder.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? cardholderName;

  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  Address? billingAddress;

  /// Intended as a Square-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? fingerprint;

  /// **Required** The ID of a customer created using the Customers API to be associated with the card.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? customerId;

  /// The ID of the merchant associated with the card.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? merchantId;

  /// An optional user-defined reference ID that associates this card with another entity in an external system. For example, a customer ID from an external customer management system.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? referenceId;

  /// Indicates whether or not a card can be used for payments.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  bool? enabled;

  /// The type of the card. The Card object includes this field only in response to Payments API calls.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? cardType;

  /// Indicates whether the Card is prepaid or not. The Card object includes this field only in response to Payments API calls.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? prepaidType;

  /// The first six digits of the card number, known as the Bank Identification Number (BIN). Only the Payments API returns this field.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? bin;

  /// Current version number of the card. Increments with each card update. Requests to update an existing Card object will be rejected unless the version in the request matches the current version for the Card.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  int? version;

  /// The card's co-brand if available. For example, an Afterpay virtual card would have a co-brand of AFTERPAY.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? cardCoBrand;

  @override
  bool operator ==(Object other) => identical(this, other) || other is Card &&
    other.id == id &&
    other.cardBrand == cardBrand &&
    other.last4 == last4 &&
    other.expMonth == expMonth &&
    other.expYear == expYear &&
    other.cardholderName == cardholderName &&
    other.billingAddress == billingAddress &&
    other.fingerprint == fingerprint &&
    other.customerId == customerId &&
    other.merchantId == merchantId &&
    other.referenceId == referenceId &&
    other.enabled == enabled &&
    other.cardType == cardType &&
    other.prepaidType == prepaidType &&
    other.bin == bin &&
    other.version == version &&
    other.cardCoBrand == cardCoBrand;

  @override
  int get hashCode =>
    // ignore: unnecessary_parenthesis
    (id == null ? 0 : id!.hashCode) +
    (cardBrand == null ? 0 : cardBrand!.hashCode) +
    (last4 == null ? 0 : last4!.hashCode) +
    (expMonth == null ? 0 : expMonth!.hashCode) +
    (expYear == null ? 0 : expYear!.hashCode) +
    (cardholderName == null ? 0 : cardholderName!.hashCode) +
    (billingAddress == null ? 0 : billingAddress!.hashCode) +
    (fingerprint == null ? 0 : fingerprint!.hashCode) +
    (customerId == null ? 0 : customerId!.hashCode) +
    (merchantId == null ? 0 : merchantId!.hashCode) +
    (referenceId == null ? 0 : referenceId!.hashCode) +
    (enabled == null ? 0 : enabled!.hashCode) +
    (cardType == null ? 0 : cardType!.hashCode) +
    (prepaidType == null ? 0 : prepaidType!.hashCode) +
    (bin == null ? 0 : bin!.hashCode) +
    (version == null ? 0 : version!.hashCode) +
    (cardCoBrand == null ? 0 : cardCoBrand!.hashCode);

  @override
  String toString() => 'Card[id=$id, cardBrand=$cardBrand, last4=$last4, expMonth=$expMonth, expYear=$expYear, cardholderName=$cardholderName, billingAddress=$billingAddress, fingerprint=$fingerprint, customerId=$customerId, merchantId=$merchantId, referenceId=$referenceId, enabled=$enabled, cardType=$cardType, prepaidType=$prepaidType, bin=$bin, version=$version, cardCoBrand=$cardCoBrand]';

  Map<String, dynamic> toJson() {
    final json = <String, dynamic>{};
    if (this.id != null) {
      json[r'id'] = this.id;
    } else {
      json[r'id'] = null;
    }
    if (this.cardBrand != null) {
      json[r'card_brand'] = this.cardBrand;
    } else {
      json[r'card_brand'] = null;
    }
    if (this.last4 != null) {
      json[r'last_4'] = this.last4;
    } else {
      json[r'last_4'] = null;
    }
    if (this.expMonth != null) {
      json[r'exp_month'] = this.expMonth;
    } else {
      json[r'exp_month'] = null;
    }
    if (this.expYear != null) {
      json[r'exp_year'] = this.expYear;
    } else {
      json[r'exp_year'] = null;
    }
    if (this.cardholderName != null) {
      json[r'cardholder_name'] = this.cardholderName;
    } else {
      json[r'cardholder_name'] = null;
    }
    if (this.billingAddress != null) {
      json[r'billing_address'] = this.billingAddress;
    } else {
      json[r'billing_address'] = null;
    }
    if (this.fingerprint != null) {
      json[r'fingerprint'] = this.fingerprint;
    } else {
      json[r'fingerprint'] = null;
    }
    if (this.customerId != null) {
      json[r'customer_id'] = this.customerId;
    } else {
      json[r'customer_id'] = null;
    }
    if (this.merchantId != null) {
      json[r'merchant_id'] = this.merchantId;
    } else {
      json[r'merchant_id'] = null;
    }
    if (this.referenceId != null) {
      json[r'reference_id'] = this.referenceId;
    } else {
      json[r'reference_id'] = null;
    }
    if (this.enabled != null) {
      json[r'enabled'] = this.enabled;
    } else {
      json[r'enabled'] = null;
    }
    if (this.cardType != null) {
      json[r'card_type'] = this.cardType;
    } else {
      json[r'card_type'] = null;
    }
    if (this.prepaidType != null) {
      json[r'prepaid_type'] = this.prepaidType;
    } else {
      json[r'prepaid_type'] = null;
    }
    if (this.bin != null) {
      json[r'bin'] = this.bin;
    } else {
      json[r'bin'] = null;
    }
    if (this.version != null) {
      json[r'version'] = this.version;
    } else {
      json[r'version'] = null;
    }
    if (this.cardCoBrand != null) {
      json[r'card_co_brand'] = this.cardCoBrand;
    } else {
      json[r'card_co_brand'] = null;
    }
    return json;
  }

  /// Returns a new [Card] instance and imports its values from
  /// [value] if it's a [Map], null otherwise.
  // ignore: prefer_constructors_over_static_methods
  static Card? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      // Ensure that the map contains the required keys.
      // Note 1: the values aren't checked for validity beyond being non-null.
      // Note 2: this code is stripped in release mode!
      assert(() {
        requiredKeys.forEach((key) {
          assert(json.containsKey(key), 'Required key "Card[$key]" is missing from JSON.');
          assert(json[key] != null, 'Required key "Card[$key]" has a null value in JSON.');
        });
        return true;
      }());

      return Card(
        id: mapValueOfType<String>(json, r'id'),
        cardBrand: mapValueOfType<String>(json, r'card_brand'),
        last4: mapValueOfType<String>(json, r'last_4'),
        expMonth: mapValueOfType<int>(json, r'exp_month'),
        expYear: mapValueOfType<int>(json, r'exp_year'),
        cardholderName: mapValueOfType<String>(json, r'cardholder_name'),
        billingAddress: Address.fromJson(json[r'billing_address']),
        fingerprint: mapValueOfType<String>(json, r'fingerprint'),
        customerId: mapValueOfType<String>(json, r'customer_id'),
        merchantId: mapValueOfType<String>(json, r'merchant_id'),
        referenceId: mapValueOfType<String>(json, r'reference_id'),
        enabled: mapValueOfType<bool>(json, r'enabled'),
        cardType: mapValueOfType<String>(json, r'card_type'),
        prepaidType: mapValueOfType<String>(json, r'prepaid_type'),
        bin: mapValueOfType<String>(json, r'bin'),
        version: mapValueOfType<int>(json, r'version'),
        cardCoBrand: mapValueOfType<String>(json, r'card_co_brand'),
      );
    }
    return null;
  }

  static List<Card> listFromJson(dynamic json, {bool growable = false,}) {
    final result = <Card>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = Card.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  static Map<String, Card> mapFromJson(dynamic json) {
    final map = <String, Card>{};
    if (json is Map && json.isNotEmpty) {
      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
      for (final entry in json.entries) {
        final value = Card.fromJson(entry.value);
        if (value != null) {
          map[entry.key] = value;
        }
      }
    }
    return map;
  }

  // maps a json object with a list of Card-objects as value to a dart map
  static Map<String, List<Card>> mapListFromJson(dynamic json, {bool growable = false,}) {
    final map = <String, List<Card>>{};
    if (json is Map && json.isNotEmpty) {
      // ignore: parameter_assignments
      json = json.cast<String, dynamic>();
      for (final entry in json.entries) {
        map[entry.key] = Card.listFromJson(entry.value, growable: growable,);
      }
    }
    return map;
  }

  /// The list of required keys that must be present in a JSON.
  static const requiredKeys = <String>{
  };
}

