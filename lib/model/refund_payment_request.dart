//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//
// @dart=2.12

// ignore_for_file: unused_element, unused_import
// ignore_for_file: always_put_required_named_parameters_first
// ignore_for_file: constant_identifier_names
// ignore_for_file: lines_longer_than_80_chars

part of openapi.api;

class RefundPaymentRequest {
  /// Returns a new [RefundPaymentRequest] instance.
  RefundPaymentRequest({
    required this.idempotencyKey,
    required this.amountMoney,
    this.appFeeMoney,
    this.paymentId,
    this.destinationId,
    this.unlinked,
    this.locationId,
    this.customerId,
    this.reason,
    this.paymentVersionToken,
    this.teamMemberId,
  });

  ///  A unique string that identifies this `RefundPayment` request. The key can be any valid string but must be unique for every `RefundPayment` request.  Keys are limited to a max of 45 characters - however, the number of allowed characters might be less than 45, if multi-byte characters are used.  For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
  String idempotencyKey;

  Money amountMoney;

  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  Money? appFeeMoney;

  /// The unique ID of the payment being refunded. Required when unlinked=false, otherwise must not be set.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? paymentId;

  /// The ID indicating where funds will be refunded to, if this is an unlinked refund. This can be any of the following: A token generated by Web Payments SDK; a card-on-file identifier. Required for requests specifying unlinked=true. Otherwise, if included when `unlinked=false`, will throw an error.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? destinationId;

  /// Indicates that the refund is not linked to a Square payment. If set to true, `destination_id` and `location_id` must be supplied while `payment_id` must not be provided.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  bool? unlinked;

  /// The location ID associated with the unlinked refund. Required for requests specifying `unlinked=true`. Otherwise, if included when `unlinked=false`, will throw an error.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? locationId;

  /// The [Customer](https://developer.squareup.com/reference/square_2023-12-13/objects/Customer) ID of the customer associated with the refund. This is required if the `destination_id` refers to a card on file created using the Cards API. Only allowed when `unlinked=true`.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? customerId;

  /// A description of the reason for the refund.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? reason;

  ///  Used for optimistic concurrency. This opaque token identifies the current `Payment` version that the caller expects. If the server has a different version of the Payment, the update fails and a response with a VERSION_MISMATCH error is returned. If the versions match, or the field is not provided, the refund proceeds as normal.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? paymentVersionToken;

  /// An optional [TeamMember](https://developer.squareup.com/reference/square_2023-12-13/objects/TeamMember) ID to associate with this refund.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? teamMemberId;

  @override
  bool operator ==(Object other) => identical(this, other) || other is RefundPaymentRequest &&
    other.idempotencyKey == idempotencyKey &&
    other.amountMoney == amountMoney &&
    other.appFeeMoney == appFeeMoney &&
    other.paymentId == paymentId &&
    other.destinationId == destinationId &&
    other.unlinked == unlinked &&
    other.locationId == locationId &&
    other.customerId == customerId &&
    other.reason == reason &&
    other.paymentVersionToken == paymentVersionToken &&
    other.teamMemberId == teamMemberId;

  @override
  int get hashCode =>
    // ignore: unnecessary_parenthesis
    (idempotencyKey.hashCode) +
    (amountMoney.hashCode) +
    (appFeeMoney == null ? 0 : appFeeMoney!.hashCode) +
    (paymentId == null ? 0 : paymentId!.hashCode) +
    (destinationId == null ? 0 : destinationId!.hashCode) +
    (unlinked == null ? 0 : unlinked!.hashCode) +
    (locationId == null ? 0 : locationId!.hashCode) +
    (customerId == null ? 0 : customerId!.hashCode) +
    (reason == null ? 0 : reason!.hashCode) +
    (paymentVersionToken == null ? 0 : paymentVersionToken!.hashCode) +
    (teamMemberId == null ? 0 : teamMemberId!.hashCode);

  @override
  String toString() => 'RefundPaymentRequest[idempotencyKey=$idempotencyKey, amountMoney=$amountMoney, appFeeMoney=$appFeeMoney, paymentId=$paymentId, destinationId=$destinationId, unlinked=$unlinked, locationId=$locationId, customerId=$customerId, reason=$reason, paymentVersionToken=$paymentVersionToken, teamMemberId=$teamMemberId]';

  Map<String, dynamic> toJson() {
    final json = <String, dynamic>{};
      json[r'idempotency_key'] = this.idempotencyKey;
      json[r'amount_money'] = this.amountMoney;
    if (this.appFeeMoney != null) {
      json[r'app_fee_money'] = this.appFeeMoney;
    } else {
      json[r'app_fee_money'] = null;
    }
    if (this.paymentId != null) {
      json[r'payment_id'] = this.paymentId;
    } else {
      json[r'payment_id'] = null;
    }
    if (this.destinationId != null) {
      json[r'destination_id'] = this.destinationId;
    } else {
      json[r'destination_id'] = null;
    }
    if (this.unlinked != null) {
      json[r'unlinked'] = this.unlinked;
    } else {
      json[r'unlinked'] = null;
    }
    if (this.locationId != null) {
      json[r'location_id'] = this.locationId;
    } else {
      json[r'location_id'] = null;
    }
    if (this.customerId != null) {
      json[r'customer_id'] = this.customerId;
    } else {
      json[r'customer_id'] = null;
    }
    if (this.reason != null) {
      json[r'reason'] = this.reason;
    } else {
      json[r'reason'] = null;
    }
    if (this.paymentVersionToken != null) {
      json[r'payment_version_token'] = this.paymentVersionToken;
    } else {
      json[r'payment_version_token'] = null;
    }
    if (this.teamMemberId != null) {
      json[r'team_member_id'] = this.teamMemberId;
    } else {
      json[r'team_member_id'] = null;
    }
    return json;
  }

  /// Returns a new [RefundPaymentRequest] instance and imports its values from
  /// [value] if it's a [Map], null otherwise.
  // ignore: prefer_constructors_over_static_methods
  static RefundPaymentRequest? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      // Ensure that the map contains the required keys.
      // Note 1: the values aren't checked for validity beyond being non-null.
      // Note 2: this code is stripped in release mode!
      assert(() {
        requiredKeys.forEach((key) {
          assert(json.containsKey(key), 'Required key "RefundPaymentRequest[$key]" is missing from JSON.');
          assert(json[key] != null, 'Required key "RefundPaymentRequest[$key]" has a null value in JSON.');
        });
        return true;
      }());

      return RefundPaymentRequest(
        idempotencyKey: mapValueOfType<String>(json, r'idempotency_key')!,
        amountMoney: Money.fromJson(json[r'amount_money'])!,
        appFeeMoney: Money.fromJson(json[r'app_fee_money']),
        paymentId: mapValueOfType<String>(json, r'payment_id'),
        destinationId: mapValueOfType<String>(json, r'destination_id'),
        unlinked: mapValueOfType<bool>(json, r'unlinked'),
        locationId: mapValueOfType<String>(json, r'location_id'),
        customerId: mapValueOfType<String>(json, r'customer_id'),
        reason: mapValueOfType<String>(json, r'reason'),
        paymentVersionToken: mapValueOfType<String>(json, r'payment_version_token'),
        teamMemberId: mapValueOfType<String>(json, r'team_member_id'),
      );
    }
    return null;
  }

  static List<RefundPaymentRequest> listFromJson(dynamic json, {bool growable = false,}) {
    final result = <RefundPaymentRequest>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = RefundPaymentRequest.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  static Map<String, RefundPaymentRequest> mapFromJson(dynamic json) {
    final map = <String, RefundPaymentRequest>{};
    if (json is Map && json.isNotEmpty) {
      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
      for (final entry in json.entries) {
        final value = RefundPaymentRequest.fromJson(entry.value);
        if (value != null) {
          map[entry.key] = value;
        }
      }
    }
    return map;
  }

  // maps a json object with a list of RefundPaymentRequest-objects as value to a dart map
  static Map<String, List<RefundPaymentRequest>> mapListFromJson(dynamic json, {bool growable = false,}) {
    final map = <String, List<RefundPaymentRequest>>{};
    if (json is Map && json.isNotEmpty) {
      // ignore: parameter_assignments
      json = json.cast<String, dynamic>();
      for (final entry in json.entries) {
        map[entry.key] = RefundPaymentRequest.listFromJson(entry.value, growable: growable,);
      }
    }
    return map;
  }

  /// The list of required keys that must be present in a JSON.
  static const requiredKeys = <String>{
    'idempotency_key',
    'amount_money',
  };
}

