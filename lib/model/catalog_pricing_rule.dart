//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//
// @dart=2.12

// ignore_for_file: unused_element, unused_import
// ignore_for_file: always_put_required_named_parameters_first
// ignore_for_file: constant_identifier_names
// ignore_for_file: lines_longer_than_80_chars

part of openapi.api;

class CatalogPricingRule {
  /// Returns a new [CatalogPricingRule] instance.
  CatalogPricingRule({
    this.name,
    this.timePeriodIds = const [],
    this.discountId,
    this.matchProductsId,
    this.applyProductsId,
    this.excludeProductsId,
    this.validFromDate,
    this.validFromLocalTime,
    this.validUntilDate,
    this.validUntilLocalTime,
    this.excludeStrategy,
    this.minimumOrderSubtotalMoney,
    this.customerGroupIdsAny = const [],
  });

  /// User-defined name for the pricing rule. For example, \"Buy one get one free\" or \"10% off\".
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? name;

  /// A list of unique IDs for the catalog time periods when this pricing rule is in effect. If left unset, the pricing rule is always in effect.
  List<String> timePeriodIds;

  /// Unique ID for the `CatalogDiscount` to take off the price of all matched items.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? discountId;

  /// Unique ID for the `CatalogProductSet` that will be matched by this rule. A match rule matches within the entire cart, and can match multiple times. This field will always be set.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? matchProductsId;

  /// __Deprecated__: Please use the `exclude_products_id` field to apply an exclude set instead. Exclude sets allow better control over quantity ranges and offer more flexibility for which matched items receive a discount.  `CatalogProductSet` to apply the pricing to. An apply rule matches within the subset of the cart that fits the match rules (the match set). An apply rule can only match once in the match set. If not supplied, the pricing will be applied to all products in the match set. Other products retain their base price, or a price generated by other rules.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? applyProductsId;

  /// `CatalogProductSet` to exclude from the pricing rule. An exclude rule matches within the subset of the cart that fits the match rules (the match set). An exclude rule can only match once in the match set. If not supplied, the pricing will be applied to all products in the match set. Other products retain their base price, or a price generated by other rules.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? excludeProductsId;

  /// Represents the date the Pricing Rule is valid from. Represented in RFC 3339 full-date format (YYYY-MM-DD).
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? validFromDate;

  /// Represents the local time the pricing rule should be valid from. Represented in RFC 3339 partial-time format (HH:MM:SS). Partial seconds will be truncated.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? validFromLocalTime;

  /// Represents the date the Pricing Rule is valid until. Represented in RFC 3339 full-date format (YYYY-MM-DD).
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? validUntilDate;

  /// Represents the local time the pricing rule should be valid until. Represented in RFC 3339 partial-time format (HH:MM:SS). Partial seconds will be truncated.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? validUntilLocalTime;

  /// If an `exclude_products_id` was given, controls which subset of matched products is excluded from any discounts.  Default value: `LEAST_EXPENSIVE`
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? excludeStrategy;

  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  Money? minimumOrderSubtotalMoney;

  /// A list of IDs of customer groups, the members of which are eligible for discounts specified in this pricing rule. Notice that a group ID is generated by the Customers API. If this field is not set, the specified discount applies to matched products sold to anyone whether the buyer has a customer profile created or not. If this `customer_group_ids_any` field is set, the specified discount applies only to matched products sold to customers belonging to the specified customer groups.
  List<String> customerGroupIdsAny;

  @override
  bool operator ==(Object other) => identical(this, other) || other is CatalogPricingRule &&
    other.name == name &&
    _deepEquality.equals(other.timePeriodIds, timePeriodIds) &&
    other.discountId == discountId &&
    other.matchProductsId == matchProductsId &&
    other.applyProductsId == applyProductsId &&
    other.excludeProductsId == excludeProductsId &&
    other.validFromDate == validFromDate &&
    other.validFromLocalTime == validFromLocalTime &&
    other.validUntilDate == validUntilDate &&
    other.validUntilLocalTime == validUntilLocalTime &&
    other.excludeStrategy == excludeStrategy &&
    other.minimumOrderSubtotalMoney == minimumOrderSubtotalMoney &&
    _deepEquality.equals(other.customerGroupIdsAny, customerGroupIdsAny);

  @override
  int get hashCode =>
    // ignore: unnecessary_parenthesis
    (name == null ? 0 : name!.hashCode) +
    (timePeriodIds.hashCode) +
    (discountId == null ? 0 : discountId!.hashCode) +
    (matchProductsId == null ? 0 : matchProductsId!.hashCode) +
    (applyProductsId == null ? 0 : applyProductsId!.hashCode) +
    (excludeProductsId == null ? 0 : excludeProductsId!.hashCode) +
    (validFromDate == null ? 0 : validFromDate!.hashCode) +
    (validFromLocalTime == null ? 0 : validFromLocalTime!.hashCode) +
    (validUntilDate == null ? 0 : validUntilDate!.hashCode) +
    (validUntilLocalTime == null ? 0 : validUntilLocalTime!.hashCode) +
    (excludeStrategy == null ? 0 : excludeStrategy!.hashCode) +
    (minimumOrderSubtotalMoney == null ? 0 : minimumOrderSubtotalMoney!.hashCode) +
    (customerGroupIdsAny.hashCode);

  @override
  String toString() => 'CatalogPricingRule[name=$name, timePeriodIds=$timePeriodIds, discountId=$discountId, matchProductsId=$matchProductsId, applyProductsId=$applyProductsId, excludeProductsId=$excludeProductsId, validFromDate=$validFromDate, validFromLocalTime=$validFromLocalTime, validUntilDate=$validUntilDate, validUntilLocalTime=$validUntilLocalTime, excludeStrategy=$excludeStrategy, minimumOrderSubtotalMoney=$minimumOrderSubtotalMoney, customerGroupIdsAny=$customerGroupIdsAny]';

  Map<String, dynamic> toJson() {
    final json = <String, dynamic>{};
    if (this.name != null) {
      json[r'name'] = this.name;
    } else {
      json[r'name'] = null;
    }
      json[r'time_period_ids'] = this.timePeriodIds;
    if (this.discountId != null) {
      json[r'discount_id'] = this.discountId;
    } else {
      json[r'discount_id'] = null;
    }
    if (this.matchProductsId != null) {
      json[r'match_products_id'] = this.matchProductsId;
    } else {
      json[r'match_products_id'] = null;
    }
    if (this.applyProductsId != null) {
      json[r'apply_products_id'] = this.applyProductsId;
    } else {
      json[r'apply_products_id'] = null;
    }
    if (this.excludeProductsId != null) {
      json[r'exclude_products_id'] = this.excludeProductsId;
    } else {
      json[r'exclude_products_id'] = null;
    }
    if (this.validFromDate != null) {
      json[r'valid_from_date'] = this.validFromDate;
    } else {
      json[r'valid_from_date'] = null;
    }
    if (this.validFromLocalTime != null) {
      json[r'valid_from_local_time'] = this.validFromLocalTime;
    } else {
      json[r'valid_from_local_time'] = null;
    }
    if (this.validUntilDate != null) {
      json[r'valid_until_date'] = this.validUntilDate;
    } else {
      json[r'valid_until_date'] = null;
    }
    if (this.validUntilLocalTime != null) {
      json[r'valid_until_local_time'] = this.validUntilLocalTime;
    } else {
      json[r'valid_until_local_time'] = null;
    }
    if (this.excludeStrategy != null) {
      json[r'exclude_strategy'] = this.excludeStrategy;
    } else {
      json[r'exclude_strategy'] = null;
    }
    if (this.minimumOrderSubtotalMoney != null) {
      json[r'minimum_order_subtotal_money'] = this.minimumOrderSubtotalMoney;
    } else {
      json[r'minimum_order_subtotal_money'] = null;
    }
      json[r'customer_group_ids_any'] = this.customerGroupIdsAny;
    return json;
  }

  /// Returns a new [CatalogPricingRule] instance and imports its values from
  /// [value] if it's a [Map], null otherwise.
  // ignore: prefer_constructors_over_static_methods
  static CatalogPricingRule? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      // Ensure that the map contains the required keys.
      // Note 1: the values aren't checked for validity beyond being non-null.
      // Note 2: this code is stripped in release mode!
      assert(() {
        requiredKeys.forEach((key) {
          assert(json.containsKey(key), 'Required key "CatalogPricingRule[$key]" is missing from JSON.');
          assert(json[key] != null, 'Required key "CatalogPricingRule[$key]" has a null value in JSON.');
        });
        return true;
      }());

      return CatalogPricingRule(
        name: mapValueOfType<String>(json, r'name'),
        timePeriodIds: json[r'time_period_ids'] is Iterable
            ? (json[r'time_period_ids'] as Iterable).cast<String>().toList(growable: false)
            : const [],
        discountId: mapValueOfType<String>(json, r'discount_id'),
        matchProductsId: mapValueOfType<String>(json, r'match_products_id'),
        applyProductsId: mapValueOfType<String>(json, r'apply_products_id'),
        excludeProductsId: mapValueOfType<String>(json, r'exclude_products_id'),
        validFromDate: mapValueOfType<String>(json, r'valid_from_date'),
        validFromLocalTime: mapValueOfType<String>(json, r'valid_from_local_time'),
        validUntilDate: mapValueOfType<String>(json, r'valid_until_date'),
        validUntilLocalTime: mapValueOfType<String>(json, r'valid_until_local_time'),
        excludeStrategy: mapValueOfType<String>(json, r'exclude_strategy'),
        minimumOrderSubtotalMoney: Money.fromJson(json[r'minimum_order_subtotal_money']),
        customerGroupIdsAny: json[r'customer_group_ids_any'] is Iterable
            ? (json[r'customer_group_ids_any'] as Iterable).cast<String>().toList(growable: false)
            : const [],
      );
    }
    return null;
  }

  static List<CatalogPricingRule> listFromJson(dynamic json, {bool growable = false,}) {
    final result = <CatalogPricingRule>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = CatalogPricingRule.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  static Map<String, CatalogPricingRule> mapFromJson(dynamic json) {
    final map = <String, CatalogPricingRule>{};
    if (json is Map && json.isNotEmpty) {
      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
      for (final entry in json.entries) {
        final value = CatalogPricingRule.fromJson(entry.value);
        if (value != null) {
          map[entry.key] = value;
        }
      }
    }
    return map;
  }

  // maps a json object with a list of CatalogPricingRule-objects as value to a dart map
  static Map<String, List<CatalogPricingRule>> mapListFromJson(dynamic json, {bool growable = false,}) {
    final map = <String, List<CatalogPricingRule>>{};
    if (json is Map && json.isNotEmpty) {
      // ignore: parameter_assignments
      json = json.cast<String, dynamic>();
      for (final entry in json.entries) {
        map[entry.key] = CatalogPricingRule.listFromJson(entry.value, growable: growable,);
      }
    }
    return map;
  }

  /// The list of required keys that must be present in a JSON.
  static const requiredKeys = <String>{
  };
}

